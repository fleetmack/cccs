create or replace PACKAGE "EDW_DIM_WAREHOUSE_ENTITY"  AS

-- Map Generation Timestamp
get_generation_date      VARCHAR2(100) := 'Wed Aug 20 13:27:05 MDT 2014';

-- Map runtime identification id
OWB$MAP_OBJECT_ID             VARCHAR2(32) := '';

-- Auditing mode constants
AUDIT_NONE                    CONSTANT BINARY_INTEGER := 0;
AUDIT_STATISTICS              CONSTANT BINARY_INTEGER := 1;
AUDIT_ERROR_DETAILS           CONSTANT BINARY_INTEGER := 2;
AUDIT_COMPLETE                CONSTANT BINARY_INTEGER := 3;

-- Operating mode constants
MODE_SET                      CONSTANT BINARY_INTEGER := 0;
MODE_ROW                      CONSTANT BINARY_INTEGER := 1;
MODE_ROW_TARGET               CONSTANT BINARY_INTEGER := 2;
MODE_SET_FAILOVER_ROW         CONSTANT BINARY_INTEGER := 3;
MODE_SET_FAILOVER_ROW_TARGET  CONSTANT BINARY_INTEGER := 4;

-- Variables for auditing
get_runtime_audit_id          NUMBER(22) := 0;
get_audit_detail_id           NUMBER(22) := 0;
get_audit_detail_type_id      NUMBER(22) := 0;
get_audit_level               BINARY_INTEGER := AUDIT_ERROR_DETAILS;
get_job_audit                 BOOLEAN := TRUE; 
get_cycle_date                CONSTANT DATE := SYSDATE;
get_lob_uoid                  CONSTANT VARCHAR2(40) := '011141E13A4FC226E050F00AA3444997';
get_model_name                CONSTANT VARCHAR2(40) := '"EDW_DIM_WAREHOUSE_ENTITY"';
get_purge_group               VARCHAR2(40) := 'WB';
rowkey_counter                NUMBER(22) := 1;

-- Processing variables
get_selected                  NUMBER(22) := 0;
get_inserted                  NUMBER(22) := 0;
get_updated                   NUMBER(22) := 0;
get_deleted                   NUMBER(22) := 0;
get_merged                    NUMBER(22) := 0;
get_errors                    NUMBER(22) := 0;
get_logical_errors            NUMBER(22) := 0;
get_abort                     BOOLEAN    := FALSE;
get_abort_procedure           BOOLEAN    := FALSE; -- Causes the current procedure to be aborted, but not the entire map
get_trigger_success           BOOLEAN    := TRUE;
get_read_success              BOOLEAN    := TRUE;
get_status                    NUMBER(22) := 0;
get_column_seq                NUMBER(22) := 0;

get_processed                 NUMBER(22) := 0;
get_total_processed_rowcount  NUMBER(22) := 0;
get_chunk_iterator            NUMBER(22) := 0;
get_error_ratio               NUMBER(22) := 0;

get_audit_id                  NUMBER(22) := 0;

get_max_errors                NUMBER(22) := 0;
get_commit_frequency          NUMBER(22) := 1000;
get_operating_mode            BINARY_INTEGER := MODE_SET_FAILOVER_ROW;
get_table_function            BOOLEAN := false;
get_global_names              VARCHAR2(10) := 'FALSE';
check_record_cnt              NUMBER(22) := 0;
sql_stmt                      VARCHAR2(32767);
error_stmt                    VARCHAR2(2000);

-- Variable related to TF opertor
owb_temp_variable1       NUMBER(22);

-- Variables related to AW Load
"AWLOADLOAD_clob" clob;
"AWLOADLOAD_str" Varchar2(1000);

---- Begin Variables related to trickle feed maps
-- Variables related to LCR processing
lcr                           SYS.LCR$_ROW_RECORD := null;
lcr_original                  SYS.LCR$_ROW_RECORD := null;
lcr_old_values                SYS.LCR$_ROW_LIST   := null;
lcr_new_values                SYS.LCR$_ROW_LIST   := null;
lcr_new_old_values            SYS.LCR$_ROW_LIST   := null;

-- Variables related to message_event processing
message_event                 SYS.ANYDATA         := null;

-- Variables related to Chunking and parallel processing

start_range_id                NUMBER;
p_range_id                    NUMBER;
end_range_id                  NUMBER;
start_rowid                   ROWID;
end_rowid                     ROWID; 
chunksize                     PLS_INTEGER := NULL;
chunking_result               VARCHAR2(2000);
-- Variables related to trickle feed auditing and error handling
last_txn_id                   VARCHAR2(22)        := '';
is_session_initialized        BOOLEAN             := false;
last_error_number             NUMBER;
last_error_message            VARCHAR2(2000);
---- End Variables related to trickle feed maps

-- Special variables for controlling map execution
get_use_hc                    BOOLEAN    := FALSE;
get_no_commit                 BOOLEAN    := FALSE;
get_enable_parallel_dml       BOOLEAN    := TRUE;

TYPE a_table_to_analyze_type IS RECORD (
                                  ownname          VARCHAR2(30),
                                  tabname          VARCHAR2(30),
                                  estimate_percent NUMBER,
                                  granularity      VARCHAR2(10),
                                  cascade          BOOLEAN,
                                  degree           NUMBER);
TYPE tables_to_analyze_type IS TABLE OF a_table_to_analyze_type INDEX BY BINARY_INTEGER;
tables_to_analyze  tables_to_analyze_type;
get_rows_processed            BOOLEAN    := FALSE;

-- Buffer usage variables
TYPE t_get_buffer_done     IS TABLE OF BOOLEAN INDEX BY BINARY_INTEGER;
get_buffer_done            t_get_buffer_done;
get_buffer_done_index      BINARY_INTEGER := 1;

-- Bulk processing variables
get_bulk_size                 NATURAL := 1000;
get_bulk_loop_count           NATURAL := NULL;

-- DML Exceptions
checked_table_not_empty       EXCEPTION;
PRAGMA EXCEPTION_INIT(checked_table_not_empty, -111);
invalid_dml                   EXCEPTION;
PRAGMA EXCEPTION_INIT(invalid_dml, -112);

-- Status variable for Batch cursors
"WDT_WAREHOUSE_ENTITY_St" Boolean;
"WDT_WAREHOUSE_ENTITY_1_St" Boolean;


-- Variables: user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
"W1_0_W1" VARCHAR2(30) := 'Banner'; -- ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE
"PROCESS_IND_IN" VARCHAR2(32767); -- 
"PROCESS_DATE_IN" VARCHAR2(32767); -- 
"T3_0_C9" VARCHAR2(120) := 'CHG_PERSON'; -- ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE
"T3_1_S0" VARCHAR2(120) := NULL; -- ATTRIBUTE TABLES.OUTGRP1.STAGE_TABLE_PREFIX

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
-- Access function for ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE
FUNCTION "GET_W1_0_W1" RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;
FUNCTION "GET_W1_0_W1"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 DETERMINISTIC;
-- Access function for 
FUNCTION "GET_PROCESS_IND_IN" RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;
FUNCTION "GET_PROCESS_IND_IN"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 DETERMINISTIC;
-- Access function for 
FUNCTION "GET_PROCESS_DATE_IN" RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;
FUNCTION "GET_PROCESS_DATE_IN"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 DETERMINISTIC;
-- Access function for ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE
FUNCTION "GET_T3_0_C9" RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;
FUNCTION "GET_T3_0_C9"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 DETERMINISTIC;
-- Access function for ATTRIBUTE TABLES.OUTGRP1.STAGE_TABLE_PREFIX
FUNCTION "GET_T3_1_S0" RETURN VARCHAR2 DETERMINISTIC PARALLEL_ENABLE;
FUNCTION "GET_T3_1_S0"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 DETERMINISTIC;

-- Package global declarations




-- Function Main -- Entry point in package "EDW_DIM_WAREHOUSE_ENTITY"
--------------------------------------------------
-- Function Main: Should only be called by OWB. --
--------------------------------------------------

FUNCTION Main("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
p_env IN OWBSYS.WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER;  

-- Close cursors procedure:
PROCEDURE Close_Cursors;

-------------------------------------------------
-- Procedure Main:                             --
-- 1. An entry point for this map.             --
-- 2. Can be called by OWB user from SQL*Plus  -- 
--    or from user applications.               --
-- 3. This procedure can run even when the     --
--    runtime service is not running.          -- 
-------------------------------------------------
PROCEDURE Main(p_status OUT VARCHAR2,               "PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL,
               p_job_audit        IN VARCHAR2 DEFAULT 'TRUE')
;







END "EDW_DIM_WAREHOUSE_ENTITY";
/






create or replace PACKAGE BODY "EDW_DIM_WAREHOUSE_ENTITY" AS

-- Define cursors here so that they have global scope within the package (for debugger)

---------------------------------------------------------------------------
--
-- "DEDUPLICATOR_IN2_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "DEDUPLICATOR_IN2_c" IS
 SELECT
/* DEDUPLICATOR.INOUTGRP1 */
  "DEDUP_INPUT_SUBQUERY2"."SPRIDEN_PIDM" "SPRIDEN_PIDM",
  "DEDUP_INPUT_SUBQUERY2"."GTVVPDI_CODE" "GTVVPDI_CODE"
FROM
  (SELECT
/* JOINER.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR */
  "SPRIDEN"."SPRIDEN_PIDM" "SPRIDEN_PIDM",
  "GTVVPDI"."GTVVPDI_CODE" "GTVVPDI_CODE"
FROM
  "GTVVPDI"  "GTVVPDI",
"SATURN"."SPRIDEN"  "SPRIDEN"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'L'/* OPERATOR FILTER_L: FILTER CONDITION */ )  AND
  ( "GTVVPDI"."GTVVPDI_CODE" in ('ACC', 'CCA', 'CCD', 'CNCC',  
  'FRCC', 'LCC', 'MCC', 'NJC', 'OJC', 'PCC', 'PPCC', 'RRCC', 'TSJC')/* OPERATOR FILTER: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_1 JOIN CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2" ; 

---------------------------------------------------------------------------
--
-- "DEDUPLICATOR_0_IN2_c" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "DEDUPLICATOR_0_IN2_c" IS
 SELECT
/* DEDUPLICATOR_0.INOUTGRP1 */
  "DEDUP_INPUT_SUBQUERY2$1"."PERSON_UID" "PERSON_UID"
FROM
  (SELECT
/* JOINER_0.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR_0 */
  "CHG_PERSON"."PERSON_UID" "PERSON_UID"
FROM
  "EDWSTG"."CHG_PERSON"  "CHG_PERSON"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'R'/* OPERATOR FILTER_R: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_0 JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2$1" ; 

---------------------------------------------------------------------------
--
-- "DEDUPLICATOR_IN2_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "DEDUPLICATOR_IN2_c$1" IS
 SELECT
/* DEDUPLICATOR.INOUTGRP1 */
  "DEDUP_INPUT_SUBQUERY2$2"."SPRIDEN_PIDM$1" "SPRIDEN_PIDM$1",
  "DEDUP_INPUT_SUBQUERY2$2"."GTVVPDI_CODE$1" "GTVVPDI_CODE$1"
FROM
  (SELECT
/* JOINER.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR */
  "SPRIDEN"."SPRIDEN_PIDM" "SPRIDEN_PIDM$1",
  "GTVVPDI"."GTVVPDI_CODE" "GTVVPDI_CODE$1"
FROM
  "GTVVPDI"  "GTVVPDI",
"SATURN"."SPRIDEN"  "SPRIDEN"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'L'/* OPERATOR FILTER_L: FILTER CONDITION */ )  AND
  ( "GTVVPDI"."GTVVPDI_CODE" in ('ACC', 'CCA', 'CCD', 'CNCC',  
  'FRCC', 'LCC', 'MCC', 'NJC', 'OJC', 'PCC', 'PPCC', 'RRCC', 'TSJC')/* OPERATOR FILTER: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_1 JOIN CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2$2" ; 

---------------------------------------------------------------------------
--
-- "DEDUPLICATOR_0_IN2_c$1" Cursor declaration 
--
---------------------------------------------------------------------------
CURSOR "DEDUPLICATOR_0_IN2_c$1" IS
 SELECT
/* DEDUPLICATOR_0.INOUTGRP1 */
  "DEDUP_INPUT_SUBQUERY2$3"."PERSON_UID$1" "PERSON_UID$1"
FROM
  (SELECT
/* JOINER_0.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR_0 */
  "CHG_PERSON"."PERSON_UID" "PERSON_UID$1"
FROM
  "EDWSTG"."CHG_PERSON"  "CHG_PERSON"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'R'/* OPERATOR FILTER_R: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_0 JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2$3" ; 


a_table_to_analyze a_table_to_analyze_type;


PROCEDURE EXEC_AUTONOMOUS_SQL(CMD IN VARCHAR2) IS
  PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  EXECUTE IMMEDIATE (CMD);
  COMMIT;
END;

-- Access functions for user-defined variables via mapping Variable components,
--            and package global storage for user-defined mapping input parameters
-- Access function for ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE
FUNCTION "GET_W1_0_W1" RETURN VARCHAR2 IS
BEGIN
  RETURN "W1_0_W1";
END "GET_W1_0_W1";
FUNCTION "GET_W1_0_W1"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF (owb$p_write IS NOT NULL AND owb$p_write = 1) THEN
    "W1_0_W1" := owb$p_value;
  END IF;   
  RETURN "W1_0_W1";
END "GET_W1_0_W1";
-- Access function for 
FUNCTION "GET_PROCESS_IND_IN" RETURN VARCHAR2 IS
BEGIN
  RETURN "PROCESS_IND_IN";
END "GET_PROCESS_IND_IN";
FUNCTION "GET_PROCESS_IND_IN"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF (owb$p_write IS NOT NULL AND owb$p_write = 1) THEN
    "PROCESS_IND_IN" := owb$p_value;
  END IF;   
  RETURN "PROCESS_IND_IN";
END "GET_PROCESS_IND_IN";
-- Access function for 
FUNCTION "GET_PROCESS_DATE_IN" RETURN VARCHAR2 IS
BEGIN
  RETURN "PROCESS_DATE_IN";
END "GET_PROCESS_DATE_IN";
FUNCTION "GET_PROCESS_DATE_IN"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF (owb$p_write IS NOT NULL AND owb$p_write = 1) THEN
    "PROCESS_DATE_IN" := owb$p_value;
  END IF;   
  RETURN "PROCESS_DATE_IN";
END "GET_PROCESS_DATE_IN";
-- Access function for ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE
FUNCTION "GET_T3_0_C9" RETURN VARCHAR2 IS
BEGIN
  RETURN "T3_0_C9";
END "GET_T3_0_C9";
FUNCTION "GET_T3_0_C9"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF (owb$p_write IS NOT NULL AND owb$p_write = 1) THEN
    "T3_0_C9" := owb$p_value;
  END IF;   
  RETURN "T3_0_C9";
END "GET_T3_0_C9";
-- Access function for ATTRIBUTE TABLES.OUTGRP1.STAGE_TABLE_PREFIX
FUNCTION "GET_T3_1_S0" RETURN VARCHAR2 IS
BEGIN
  RETURN "T3_1_S0";
END "GET_T3_1_S0";
FUNCTION "GET_T3_1_S0"(owb$p_value VARCHAR2, owb$p_write NUMBER) RETURN VARCHAR2 IS
BEGIN
  IF (owb$p_write IS NOT NULL AND owb$p_write = 1) THEN
    "T3_1_S0" := owb$p_value;
  END IF;   
  RETURN "T3_1_S0";
END "GET_T3_1_S0";



---------------------------------------------------------------------------
-- Function "WDT_WAREHOUSE_ENTITY_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "WDT_WAREHOUSE_ENTITY_Bat"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) 
 RETURN BOOLEAN IS
 batch_selected        NUMBER(22) := 0;
 batch_errors          NUMBER(22) := 0;
 batch_inserted        NUMBER(22) := 0;
  batch_deleted         NUMBER(22) := 0;
  batch_merged          NUMBER(22) := 0;
  batch_action          VARCHAR2(20);
  actual_owner          VARCHAR2(30);
  actual_name           VARCHAR2(30);
  num_fk_err            NUMBER(22);
  l_rowkey              NUMBER(22) := 0;
  l_table               VARCHAR2(30) := 'CREATE';
  l_rowid               ROWID;
  l_owner               VARCHAR2(30);
  l_tablename           VARCHAR2(30);
  l_constraint          VARCHAR2(30);
  sql_excp_stmt         VARCHAR2(32767);
  batch_exception       BOOLEAN := FALSE;
  get_map_num_rows      NUMBER(22) := 0;
  TYPE exceptionsCurType IS REF CURSOR;
  exceptions_cursor     exceptionsCurType;
  batch_auditd_id       NUMBER(22) := 0;

BEGIN
  IF get_abort THEN
    RETURN FALSE;
  END IF;
  get_abort_procedure := FALSE;
          IF NOT (get_audit_level = AUDIT_NONE) THEN
    batch_auditd_id := OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template BatchAuditDetailBegin
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_name=>'"WDT_WAREHOUSE_ENTITY_Bat"',
      p_source=>'*',
      p_source_uoid=>'*',
      p_target=>'"WDT_WAREHOUSE_ENTITY"',
      p_target_uoid=>'011141E13BEEC226E050F00AA3444997',
      p_stm=>NULL,p_info=>NULL,
      
      p_exec_mode=>MODE_SET
    );
    get_audit_detail_id := batch_auditd_id;
  	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'011141E13BEEC226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY
    p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
    p_parent_object_type=>'Table',
    p_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
    p_object_type=>'Table',
    p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'011141E13BAEC226E050F00AA3444997', -- Operator SPRIDEN
    p_parent_object_name=>'SPRIDEN',
    p_parent_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
    p_parent_object_type=>'Table',
    p_object_name=>'SPRIDEN',
    p_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
    p_object_type=>'Table',
    p_location_uoid=>'F470739246C3BD3EE040F00AA34419FD' -- Location SATURN_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'920EB8309D482331E0440003BAAC9CF3', -- Operator SPRIDEN
    p_parent_object_name=>'SPRIDEN',
    p_parent_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
    p_parent_object_type=>'Table',
    p_object_name=>'SPRIDEN',
    p_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
    p_object_type=>'Table',
    p_location_uoid=>'8876F1DE43B952D4E0440003BAAC9CF3' -- SATURN_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'FD25086D14651128E040F00AA4447097', -- Operator GTVVPDI
    p_parent_object_name=>'GTVVPDI',
    p_parent_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
    p_parent_object_type=>'Table',
    p_object_name=>'GTVVPDI',
    p_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
    p_object_type=>'Table',
    p_location_uoid=>'A93A53C2BC05E953E040F00AA4444B9E' -- BANNER_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'920EB8309FD32331E0440003BAAC9CF3', -- Operator WDT_WAREHOUSE_ENTITY
    p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_parent_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
    p_parent_object_type=>'Table',
    p_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
    p_object_type=>'Table',
    p_location_uoid=>'8848749C75C84564E0440003BAAC9CF3' -- EDWMGR_LOCATION
  );
    
  END IF;
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.26
  END IF;
        
  IF NOT get_use_hc AND NOT get_no_commit THEN
    IF get_enable_parallel_dml THEN
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    ELSE
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    END IF;
  END IF;

  BEGIN
  
    IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
    
      batch_action := 'BATCH MERGE';
batch_selected := SQL%ROWCOUNT;
MERGE
/*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY") */
INTO
  "WDT_WAREHOUSE_ENTITY" "WDT_WAREHOUSE_ENTITY"
USING
  (SELECT
/* DEDUPLICATOR.INOUTGRP1 */
  NULL "MERGE_COL_ALIAS",
  "DEDUP_INPUT_SUBQUERY2$4"."SPRIDEN_PIDM$3" "SPRIDEN_PIDM$2",
  NULL "MERGE_COL_ALIAS$1",
  NULL "MERGE_COL_ALIAS$2",
  NULL "MERGE_COL_ALIAS$3",
  NULL "MERGE_COL_ALIAS$4",
  NULL "MERGE_COL_ALIAS$5",
  NULL "MERGE_COL_ALIAS$6",
  NULL "MERGE_COL_ALIAS$7",
  NULL "MERGE_COL_ALIAS$8",
  NULL "MERGE_COL_ALIAS$9",
  NULL "MERGE_COL_ALIAS$10",
  NULL "MERGE_COL_ALIAS$11",
  "DEDUP_INPUT_SUBQUERY2$4"."GTVVPDI_CODE$3" "GTVVPDI_CODE$2",
  NULL "MERGE_COL_ALIAS$12",
  NULL "MERGE_COL_ALIAS$13",
  NULL "MERGE_COL_ALIAS$14",
  NULL "MERGE_COL_ALIAS$15",
  NULL "MERGE_COL_ALIAS$16",
  NULL "MERGE_COL_ALIAS$17",
  NULL "MERGE_COL_ALIAS$18",
  NULL "MERGE_COL_ALIAS$19",
  NULL "MERGE_COL_ALIAS$20",
  NULL "MERGE_COL_ALIAS$21",
  NULL "MERGE_COL_ALIAS$22",
  NULL "MERGE_COL_ALIAS$23",
  NULL "MERGE_COL_ALIAS$24",
  NULL "MERGE_COL_ALIAS$25",
  "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */ "WAREHOUSE_ENTITY_SOURCE",
  NULL "MERGE_COL_ALIAS$26"
FROM
  (SELECT
/* JOINER.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR */
  "SPRIDEN"."SPRIDEN_PIDM" "SPRIDEN_PIDM$3",
  "GTVVPDI"."GTVVPDI_CODE" "GTVVPDI_CODE$3"
FROM
  "GTVVPDI"  "GTVVPDI",
"SATURN"."SPRIDEN"  "SPRIDEN"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'L'/* OPERATOR FILTER_L: FILTER CONDITION */ )  AND
  ( "GTVVPDI"."GTVVPDI_CODE" in ('ACC', 'CCA', 'CCD', 'CNCC',  
  'FRCC', 'LCC', 'MCC', 'NJC', 'OJC', 'PCC', 'PPCC', 'RRCC', 'TSJC')/* OPERATOR FILTER: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_1 JOIN CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2$4" 
  )
    "MERGE_SUBQUERY"
ON (
  "WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "MERGE_SUBQUERY"."SPRIDEN_PIDM$2"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "USER_ATTRIBUTE_01" = "MERGE_SUBQUERY"."GTVVPDI_CODE$2",
  "SYSTEM_LOAD_PROCESS" = "MERGE_SUBQUERY"."WAREHOUSE_ENTITY_SOURCE"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("WDT_WAREHOUSE_ENTITY"."BANNER_PIDM",
      "WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01",
      "WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS")
    VALUES
      ("MERGE_SUBQUERY"."SPRIDEN_PIDM$2",
      "MERGE_SUBQUERY"."GTVVPDI_CODE$2",
      "MERGE_SUBQUERY"."WAREHOUSE_ENTITY_SOURCE")
  ;
batch_merged := SQL%ROWCOUNT;
batch_selected := SQL%ROWCOUNT;
get_total_processed_rowcount := get_total_processed_rowcount + batch_merged;

      
      IF get_errors + batch_errors > get_max_errors THEN
        get_abort := TRUE;
      END IF;
      IF NOT get_use_hc AND NOT get_no_commit THEN
        COMMIT; -- commit no.5
      END IF;
    END IF;
  
  EXCEPTION WHEN OTHERS THEN
      last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          
    IF NOT get_no_commit THEN
      ROLLBACK;
    END IF;
    batch_errors := batch_errors + 1;
    IF get_errors + batch_errors > get_max_errors THEN
      get_abort := TRUE;
    END IF;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>batch_auditd_id,
        p_rowkey=>0,
        p_table=>'"WDT_WAREHOUSE_ENTITY"',
        p_column=>'*',
        p_dstval=>NULL,
        p_stm=>'TRACE 823: ' || batch_action,
        p_sqlerr=>SQLCODE,
        p_sqlerrm=>SQLERRM,
        p_rowid=>NULL
      );
    END IF;
    get_errors := get_errors + batch_errors;
    get_selected := get_selected + batch_selected;
    
  
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        OWBSYS.WB_RT_MAPAUDIT.auditd_end(
          p_rtd=>batch_auditd_id,
          p_sel=>batch_selected,
          p_ins=>NULL,
          p_upd=>NULL,
          p_del=>NULL,
          p_err=>batch_errors,
          p_dis=>NULL,  -- BatchErrorAuditDetailEnd
          p_mer=>NULL
        );
      END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.6
    END IF;
    batch_exception := TRUE;
  END;
  
  BEGIN
    
IF NOT batch_exception AND NOT get_no_commit THEN
      -- resolve actual owner and name
      OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(
      p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      IF actual_name IS NOT NULL THEN
        SELECT NVL(num_rows, 0) INTO get_map_num_rows
        FROM all_tables
        WHERE table_name = actual_name
        AND owner = actual_owner;
        IF (batch_inserted + batch_merged) >= get_map_num_rows THEN
          a_table_to_analyze.ownname := actual_owner;
          a_table_to_analyze.tabname := actual_name;
          a_table_to_analyze.estimate_percent := 5;
          a_table_to_analyze.granularity := 'ALL';
          a_table_to_analyze.cascade := TRUE;
          a_table_to_analyze.degree  := NULL;
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
        "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
        END IF;
      END IF;
    END IF;
    
  EXCEPTION WHEN OTHERS THEN
      last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>batch_auditd_id,
        p_rowkey=>0,
        p_table=>'"WDT_WAREHOUSE_ENTITY"',
        p_column=>'*',
        p_dstval=>NULL,
        p_stm=>'TRACE 824: ' || batch_action,
        p_sqlerr=>SQLCODE,
        p_sqlerrm=>SQLERRM,
        p_rowid=>NULL
      );
    END IF;
  END;
  
  IF batch_exception THEN
    RETURN FALSE;
  END IF;
        get_deleted := get_deleted + batch_deleted;
  get_inserted := get_inserted + batch_inserted;
  get_errors := get_errors + batch_errors;
  get_selected := get_selected + batch_selected;
  get_merged := get_merged + batch_merged;
  
          IF NOT (get_audit_level = AUDIT_NONE) THEN
    OWBSYS.WB_RT_MAPAUDIT.auditd_end(
      p_rtd=>batch_auditd_id,
      p_sel=>batch_selected,
      p_ins=>batch_inserted,
      p_upd=>NULL,
      p_del=>batch_deleted,
      p_err=>batch_errors,
      p_dis=>NULL,
      p_mer=>batch_merged, -- BatchAuditDetailEnd
      p_autotrans=>(NOT get_use_hc) 
    );
  END IF;
        
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.3
  END IF;
  RETURN TRUE;
END "WDT_WAREHOUSE_ENTITY_Bat";
---------------------------------------------------------------------------
-- Function "WDT_WAREHOUSE_ENTITY_1_Bat"
--   performs batch extraction
--   Returns TRUE on success
--   Returns FALSE on failure
---------------------------------------------------------------------------
FUNCTION "WDT_WAREHOUSE_ENTITY_1_Bat"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) 
 RETURN BOOLEAN IS
 batch_selected        NUMBER(22) := 0;
 batch_errors          NUMBER(22) := 0;
 batch_inserted        NUMBER(22) := 0;
  batch_deleted         NUMBER(22) := 0;
  batch_merged          NUMBER(22) := 0;
  batch_action          VARCHAR2(20);
  actual_owner          VARCHAR2(30);
  actual_name           VARCHAR2(30);
  num_fk_err            NUMBER(22);
  l_rowkey              NUMBER(22) := 0;
  l_table               VARCHAR2(30) := 'CREATE';
  l_rowid               ROWID;
  l_owner               VARCHAR2(30);
  l_tablename           VARCHAR2(30);
  l_constraint          VARCHAR2(30);
  sql_excp_stmt         VARCHAR2(32767);
  batch_exception       BOOLEAN := FALSE;
  get_map_num_rows      NUMBER(22) := 0;
  TYPE exceptionsCurType IS REF CURSOR;
  exceptions_cursor     exceptionsCurType;
  batch_auditd_id       NUMBER(22) := 0;

BEGIN
  IF get_abort THEN
    RETURN FALSE;
  END IF;
  get_abort_procedure := FALSE;
          IF NOT (get_audit_level = AUDIT_NONE) THEN
    batch_auditd_id := OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template BatchAuditDetailBegin
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_name=>'"WDT_WAREHOUSE_ENTITY_1_Bat"',
      p_source=>'*',
      p_source_uoid=>'*',
      p_target=>'"WDT_WAREHOUSE_ENTITY_1"',
      p_target_uoid=>'011141E13C27C226E050F00AA3444997',
      p_stm=>NULL,p_info=>NULL,
      
      p_exec_mode=>MODE_SET
    );
    get_audit_detail_id := batch_auditd_id;
  	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'DB9733E5DE63CD7DE0401895B8250EA8', -- Operator WDT_WAREHOUSE_ENTITY_1
    p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_parent_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
    p_parent_object_type=>'Table',
    p_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
    p_object_type=>'Table',
    p_location_uoid=>'D10E77AFDB2F188FE0401895B8256E77' -- EDWMGR_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'DB9733E5DE31CD7DE0401895B8250EA8', -- Operator CHG_PERSON
    p_parent_object_name=>'CHG_PERSON',
    p_parent_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
    p_parent_object_type=>'Table',
    p_object_name=>'CHG_PERSON',
    p_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
    p_object_type=>'Table',
    p_location_uoid=>'D10E77AFDB4A188FE0401895B8256E77' -- EDWSTG_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'011141E13A54C226E050F00AA3444997', -- Operator CHG_PERSON
    p_parent_object_name=>'CHG_PERSON',
    p_parent_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
    p_parent_object_type=>'Table',
    p_object_name=>'CHG_PERSON',
    p_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
    p_object_type=>'Table',
    p_location_uoid=>'F470739246A8BD3EE040F00AA34419FD' -- Location EDWSTG_LOCATION
  );
    	get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
    p_rtd=>get_audit_detail_id,
    p_parent_operator_uoid=>'011141E13C27C226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY_1
    p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
    p_parent_object_type=>'Table',
    p_object_name=>'WDT_WAREHOUSE_ENTITY',
    p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
    p_object_type=>'Table',
    p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
  );
    
  END IF;
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.26
  END IF;
        
  IF NOT get_use_hc AND NOT get_no_commit THEN
    IF get_enable_parallel_dml THEN
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
    ELSE
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    END IF;
  END IF;

  BEGIN
  
    IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
    
      batch_action := 'BATCH MERGE';
batch_selected := SQL%ROWCOUNT;
MERGE
/*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY_1") */
INTO
  "WDT_WAREHOUSE_ENTITY" "WDT_WAREHOUSE_ENTITY_1"
USING
  (SELECT
/* DEDUPLICATOR_0.INOUTGRP1 */
  NULL "MERGE_COL_ALIAS$27",
  "DEDUP_INPUT_SUBQUERY2$5"."PERSON_UID$3" "PERSON_UID$2",
  NULL "MERGE_COL_ALIAS$28",
  NULL "MERGE_COL_ALIAS$29",
  NULL "MERGE_COL_ALIAS$30",
  NULL "MERGE_COL_ALIAS$31",
  NULL "MERGE_COL_ALIAS$32",
  NULL "MERGE_COL_ALIAS$33",
  NULL "MERGE_COL_ALIAS$34",
  NULL "MERGE_COL_ALIAS$35",
  NULL "MERGE_COL_ALIAS$36",
  NULL "MERGE_COL_ALIAS$37",
  NULL "MERGE_COL_ALIAS$38",
  NULL "MERGE_COL_ALIAS$39",
  NULL "MERGE_COL_ALIAS$40",
  NULL "MERGE_COL_ALIAS$41",
  NULL "MERGE_COL_ALIAS$42",
  NULL "MERGE_COL_ALIAS$43",
  NULL "MERGE_COL_ALIAS$44",
  NULL "MERGE_COL_ALIAS$45",
  NULL "MERGE_COL_ALIAS$46",
  NULL "MERGE_COL_ALIAS$47",
  NULL "MERGE_COL_ALIAS$48",
  NULL "MERGE_COL_ALIAS$49",
  NULL "MERGE_COL_ALIAS$50",
  NULL "MERGE_COL_ALIAS$51",
  NULL "MERGE_COL_ALIAS$52",
  NULL "MERGE_COL_ALIAS$53",
  "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */ "WAREHOUSE_ENTITY_SOURCE$1",
  NULL "MERGE_COL_ALIAS$54"
FROM
  (SELECT
/* JOINER_0.OUTGRP1 */
DISTINCT  /* OPERATOR DEDUPLICATOR_0 */
  "CHG_PERSON"."PERSON_UID" "PERSON_UID$3"
FROM
  "EDWSTG"."CHG_PERSON"  "CHG_PERSON"
  WHERE 
  ( ("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */) = 'R'/* OPERATOR FILTER_R: FILTER CONDITION */ )  AND
  ( 1=1/* OPERATOR JOINER_0 JOIN CONDITION */ ) ) "DEDUP_INPUT_SUBQUERY2$5" 
  )
    "MERGE_SUBQUERY$1"
ON (
  "WDT_WAREHOUSE_ENTITY_1"."BANNER_PIDM" = "MERGE_SUBQUERY$1"."PERSON_UID$2"
   )
  
  WHEN MATCHED THEN
    UPDATE
    SET
                  "SYSTEM_LOAD_PROCESS" = "MERGE_SUBQUERY$1"."WAREHOUSE_ENTITY_SOURCE$1"
       
  WHEN NOT MATCHED THEN
    INSERT
      ("WDT_WAREHOUSE_ENTITY_1"."BANNER_PIDM",
      "WDT_WAREHOUSE_ENTITY_1"."SYSTEM_LOAD_PROCESS")
    VALUES
      ("MERGE_SUBQUERY$1"."PERSON_UID$2",
      "MERGE_SUBQUERY$1"."WAREHOUSE_ENTITY_SOURCE$1")
  ;
batch_merged := SQL%ROWCOUNT;
batch_selected := SQL%ROWCOUNT;
get_total_processed_rowcount := get_total_processed_rowcount + batch_merged;

      
      IF get_errors + batch_errors > get_max_errors THEN
        get_abort := TRUE;
      END IF;
      IF NOT get_use_hc AND NOT get_no_commit THEN
        COMMIT; -- commit no.5
      END IF;
    END IF;
  
  EXCEPTION WHEN OTHERS THEN
      last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          
    IF NOT get_no_commit THEN
      ROLLBACK;
    END IF;
    batch_errors := batch_errors + 1;
    IF get_errors + batch_errors > get_max_errors THEN
      get_abort := TRUE;
    END IF;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>batch_auditd_id,
        p_rowkey=>0,
        p_table=>'"WDT_WAREHOUSE_ENTITY_1"',
        p_column=>'*',
        p_dstval=>NULL,
        p_stm=>'TRACE 825: ' || batch_action,
        p_sqlerr=>SQLCODE,
        p_sqlerrm=>SQLERRM,
        p_rowid=>NULL
      );
    END IF;
    get_errors := get_errors + batch_errors;
    get_selected := get_selected + batch_selected;
    
  
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        OWBSYS.WB_RT_MAPAUDIT.auditd_end(
          p_rtd=>batch_auditd_id,
          p_sel=>batch_selected,
          p_ins=>NULL,
          p_upd=>NULL,
          p_del=>NULL,
          p_err=>batch_errors,
          p_dis=>NULL,  -- BatchErrorAuditDetailEnd
          p_mer=>NULL
        );
      END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.6
    END IF;
    batch_exception := TRUE;
  END;
  
  BEGIN
    
IF NOT batch_exception AND NOT get_no_commit THEN
      -- resolve actual owner and name
      OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(
      p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      IF actual_name IS NOT NULL THEN
        SELECT NVL(num_rows, 0) INTO get_map_num_rows
        FROM all_tables
        WHERE table_name = actual_name
        AND owner = actual_owner;
        IF (batch_inserted + batch_merged) >= get_map_num_rows THEN
          a_table_to_analyze.ownname := actual_owner;
          a_table_to_analyze.tabname := actual_name;
          a_table_to_analyze.estimate_percent := 5;
          a_table_to_analyze.granularity := 'ALL';
          a_table_to_analyze.cascade := TRUE;
          a_table_to_analyze.degree  := NULL;
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
        "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
        END IF;
      END IF;
    END IF;
    
  EXCEPTION WHEN OTHERS THEN
      last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>batch_auditd_id,
        p_rowkey=>0,
        p_table=>'"WDT_WAREHOUSE_ENTITY_1"',
        p_column=>'*',
        p_dstval=>NULL,
        p_stm=>'TRACE 826: ' || batch_action,
        p_sqlerr=>SQLCODE,
        p_sqlerrm=>SQLERRM,
        p_rowid=>NULL
      );
    END IF;
  END;
  
  IF batch_exception THEN
    RETURN FALSE;
  END IF;
        get_deleted := get_deleted + batch_deleted;
  get_inserted := get_inserted + batch_inserted;
  get_errors := get_errors + batch_errors;
  get_selected := get_selected + batch_selected;
  get_merged := get_merged + batch_merged;
  
          IF NOT (get_audit_level = AUDIT_NONE) THEN
    OWBSYS.WB_RT_MAPAUDIT.auditd_end(
      p_rtd=>batch_auditd_id,
      p_sel=>batch_selected,
      p_ins=>batch_inserted,
      p_upd=>NULL,
      p_del=>batch_deleted,
      p_err=>batch_errors,
      p_dis=>NULL,
      p_mer=>batch_merged, -- BatchAuditDetailEnd
      p_autotrans=>(NOT get_use_hc) 
    );
  END IF;
        
  IF NOT get_use_hc AND NOT get_no_commit THEN
    COMMIT; -- commit no.3
  END IF;
  RETURN TRUE;
END "WDT_WAREHOUSE_ENTITY_1_Bat";



-- Procedure "DEDUPLICATOR_IN2_p" is the entry point for map "DEDUPLICATOR_IN2_p"

PROCEDURE "DEDUPLICATOR_IN2_p"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"DEDUPLICATOR_IN2_p"';
get_source_name            CONSTANT VARCHAR2(2000) := SUBSTRB('"GTVVPDI","SATURN"."SPRIDEN"',0,2000);
get_source_uoid            CONSTANT VARCHAR2(2000) := SUBSTRB('',0,2000);
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"WDT_WAREHOUSE_ENTITY_id" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_ins" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_upd" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_del" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             OWBSYS.WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_srk" OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"WDT_WAREHOUSE_ENTITY_ir"  index_redirect_array;
"SV_WDT_WAREHOUSE_ENTITY_srk" NUMBER;
"WDT_WAREHOUSE_ENTITY_new"  BOOLEAN;
"WDT_WAREHOUSE_ENTITY_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
bulk_commit_count          NUMBER(22) := 0;
bulk_commit                BOOLEAN := FALSE;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"DEDUPLICATOR_IN2_si" NUMBER(22) := 0;

"DEDUPLICATOR_IN2_i" NUMBER(22) := 0;


"WDT_WAREHOUSE_ENTITY_si" NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_D6_0_S4" IS TABLE OF NUMBER(8) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DEDUPLICATOR_IN2" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_D6_1_G0" IS TABLE OF VARCHAR2(24) INDEX BY BINARY_INTEGER;
TYPE "T_W3_1_B3" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_W3_13_U2" IS TABLE OF VARCHAR2(252) INDEX BY BINARY_INTEGER;
TYPE "T_W3_28_S0" IS TABLE OF VARCHAR2(120) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_D6_0_S4"  NUMBER(8);
"SV_ROWKEY_DEDUPLICATOR_IN2"  VARCHAR2(18);
"SV_D6_1_G0"  VARCHAR2(24);
"SV_W3_1_B3"  NUMBER;
"SV_W3_13_U2"  VARCHAR2(252);
"SV_W3_28_S0"  VARCHAR2(120);

-- Bulk: intermediate collection variables
"D6_0_S4" "T_D6_0_S4";
"ROWKEY_DEDUPLICATOR_IN2" "T_ROWKEY_DEDUPLICATOR_IN2";
"D6_1_G0" "T_D6_1_G0";
"W3_1_B3" "T_W3_1_B3";
"W3_13_U2" "T_W3_13_U2";
"W3_28_S0" "T_W3_28_S0";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_ES"(error_index IN NUMBER) IS
BEGIN

  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"GTVVPDI","SATURN"."SPRIDEN"',0,80),
    p_column=>SUBSTR('SPRIDEN_PIDM',0,80),
    p_value=>SUBSTRB("D6_0_S4"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"GTVVPDI","SATURN"."SPRIDEN"',0,80),
    p_column=>SUBSTR('GTVVPDI_CODE',0,80),
    p_value=>SUBSTRB("D6_1_G0"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "DEDUPLICATOR_IN2_ES";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    OWBSYS.WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 827: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    OWBSYS.WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "DEDUPLICATOR_IN2_ES"(p_error_index);
  END IF;
END "DEDUPLICATOR_IN2_ER";



---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_SU" opens and initializes data source
-- for map "DEDUPLICATOR_IN2_p"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "DEDUPLICATOR_IN2_c"%ISOPEN) THEN
    OPEN "DEDUPLICATOR_IN2_c";
  END IF;
  get_read_success := TRUE;
END "DEDUPLICATOR_IN2_SU";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_RD" fetches a bulk of rows from
--   the data source for map "DEDUPLICATOR_IN2_p"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "D6_0_S4".DELETE;
    "D6_1_G0".DELETE;

    FETCH
      "DEDUPLICATOR_IN2_c"
    BULK COLLECT INTO
      "D6_0_S4",
      "D6_1_G0"
    LIMIT get_bulk_size;

    get_total_processed_rowcount := get_total_processed_rowcount + "D6_0_S4".COUNT;

    IF "DEDUPLICATOR_IN2_c"%NOTFOUND AND "D6_0_S4".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "D6_0_S4".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "D6_0_S4".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        OWBSYS.WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 828: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        OWBSYS.WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "DEDUPLICATOR_IN2_RD";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_DML"(si NUMBER, firstround BOOLEAN) IS
 "WDT_WAREHOUSE_ENTITY_ins0" NUMBER := "WDT_WAREHOUSE_ENTITY_ins";
"WDT_WAREHOUSE_ENTITY_upd0" NUMBER := "WDT_WAREHOUSE_ENTITY_upd";
BEGIN
 IF get_use_hc THEN
  IF firstround AND NOT get_row_status THEN
   RETURN;
  END IF;
  get_row_status := TRUE;
 END IF;
 IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
-- Update/Insert DML for "WDT_WAREHOUSE_ENTITY"
  normal_action := 'UPDATE';
  error_action  := 'UPDATE';
  get_target_name := '"WDT_WAREHOUSE_ENTITY"';
  get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
  "WDT_WAREHOUSE_ENTITY_si" := 1;
  update_bulk.DELETE;
  update_bulk_index := 1;
  IF "WDT_WAREHOUSE_ENTITY_i" > get_bulk_size 
 OR "DEDUPLICATOR_IN2_c"%NOTFOUND OR get_abort OR get_use_hc THEN
    LOOP
      get_rowid.DELETE;

      BEGIN
        FORALL i IN "WDT_WAREHOUSE_ENTITY_si".."WDT_WAREHOUSE_ENTITY_i" - 1 
          UPDATE
          /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY") */
            "WDT_WAREHOUSE_ENTITY"
          SET

						"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01" = "W3_13_U2"
(i),						"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W3_28_S0"
(i)
  
          WHERE

						"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W3_1_B3"
(i)
  
          RETURNING ROWID BULK COLLECT INTO get_rowid;
          
        feedback_bulk_limit := "WDT_WAREHOUSE_ENTITY_i" - 1;
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..feedback_bulk_limit LOOP
          IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
            update_bulk(update_bulk_index) := rowkey_index;
            update_bulk_index := update_bulk_index + 1;
          ELSE
            IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
              get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
              rowkey_bulk_index := rowkey_bulk_index + 1;
            END IF;
          END IF;
        END LOOP;
        
        
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

        "WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd" + get_rowid.COUNT;
        "WDT_WAREHOUSE_ENTITY_si" := "WDT_WAREHOUSE_ENTITY_i";

      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          IF SQL%NOTFOUND THEN
            last_successful_index := 0;
          ELSE
            FOR rowkey_index IN REVERSE "WDT_WAREHOUSE_ENTITY_si".."WDT_WAREHOUSE_ENTITY_i"- 1 LOOP
              IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                last_successful_index := rowkey_index;
                EXIT;
              END IF;
            END LOOP;
          END IF;
          feedback_bulk_limit := last_successful_index;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
          "WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd" + get_rowid.COUNT;
          IF last_successful_index = 0 THEN
            last_successful_index := "WDT_WAREHOUSE_ENTITY_si";
          ELSE
            last_successful_index := last_successful_index +1;
          END IF;
          LOOP
            BEGIN
              UPDATE
              /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY") */
                "WDT_WAREHOUSE_ENTITY"
              SET

								"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01" = "W3_13_U2"
(last_successful_index),								"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W3_28_S0"
(last_successful_index)

              WHERE

								"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W3_1_B3"
(last_successful_index)

              ;
            update_bulk(update_bulk_index) := last_successful_index;
            update_bulk_index := update_bulk_index + 1;
            last_successful_index := last_successful_index + 1;
          EXCEPTION
            WHEN OTHERS THEN
                last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                error_rowkey := "WDT_WAREHOUSE_ENTITY_srk"(last_successful_index);
                OWBSYS.WB_RT_MAPAUDIT.error(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rtd=>get_audit_detail_id,
                  p_rowkey=>error_rowkey,
                  p_table=>get_target_name,
                  p_column=>'*',
                  p_dstval=>NULL,
                  p_stm=>'TRACE : ' || error_action,
                  p_sqlerr=>SQLCODE,
                  p_sqlerrm=>SQLERRM,
                  p_rowid=>NULL
                );
                get_column_seq := 0;
                

                
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01"',0,80),SUBSTRB("W3_13_U2"(last_successful_index),0,2000));
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W3_28_S0"(last_successful_index),0,2000));
                
              END IF;
              IF get_audit_level = AUDIT_COMPLETE THEN
                OWBSYS.WB_RT_MAPAUDIT.register_feedback(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rowkey=>error_rowkey,
                  p_status=>'ERROR',
                  p_table=>get_target_name,
                  p_role=>'T',
                  p_action=>error_action
                );
              END IF;
              "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
              
              IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
                get_abort:= TRUE;
              END IF;
              "WDT_WAREHOUSE_ENTITY_si" := last_successful_index + 1;
              EXIT;
          END;
        END LOOP;
    END;
    IF "WDT_WAREHOUSE_ENTITY_si" >= "WDT_WAREHOUSE_ENTITY_i" OR get_abort THEN
      EXIT;
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_i" := 1;

  --process leftover inserts
  insert_bulk_index := 0;
  FOR j IN 1..update_bulk.COUNT LOOP
    insert_bulk_index := insert_bulk_index + 1;
		"W3_1_B3"(insert_bulk_index) := "W3_1_B3"(update_bulk(j));
		"W3_13_U2"(insert_bulk_index) := "W3_13_U2"(update_bulk(j));
		"W3_28_S0"(insert_bulk_index) := "W3_28_S0"(update_bulk(j));
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      "WDT_WAREHOUSE_ENTITY_srk"(insert_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(update_bulk(j));
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_si" := 1;
  normal_action := 'INSERT';
  error_action  := 'INSERT';
  LOOP
    EXIT WHEN get_abort OR "WDT_WAREHOUSE_ENTITY_si" > insert_bulk_index;
    get_rowid.DELETE;

    BEGIN
      FORALL i IN "WDT_WAREHOUSE_ENTITY_si"..insert_bulk_index
        INSERT INTO
          "WDT_WAREHOUSE_ENTITY"
          ("WDT_WAREHOUSE_ENTITY"."BANNER_PIDM",
          "WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01",
          "WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS")
        VALUES
          ("W3_1_B3"(i),
          "W3_13_U2"(i),
          "W3_28_S0"(i))
        RETURNING ROWID BULK COLLECT INTO get_rowid;
      error_index := "WDT_WAREHOUSE_ENTITY_si" + get_rowid.COUNT;
    EXCEPTION
      WHEN OTHERS THEN
          last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
        error_index := "WDT_WAREHOUSE_ENTITY_si" + get_rowid.COUNT;
        IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
          error_rowkey := "WDT_WAREHOUSE_ENTITY_srk"(error_index);
          OWBSYS.WB_RT_MAPAUDIT.error(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rtd=>get_audit_detail_id,
            p_rowkey=>error_rowkey,
            p_table=>get_target_name,
            p_column=>'*',
            p_dstval=>NULL,
            p_stm=>'TRACE 829: ' || error_action,
            p_sqlerr=>SQLCODE,
            p_sqlerrm=>SQLERRM,
            p_rowid=>NULL
          );
          get_column_seq := 0;
          

          
          
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM"',0,80),SUBSTRB("W3_1_B3"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01"',0,80),SUBSTRB("W3_13_U2"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W3_28_S0"(error_index),0,2000));
          
        END IF;
        IF get_audit_level = AUDIT_COMPLETE THEN
          OWBSYS.WB_RT_MAPAUDIT.register_feedback(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rowkey=>error_rowkey,
            p_status=>'ERROR',
            p_table=>get_target_name,
            p_role=>'T',
            p_action=>error_action
          );
        END IF;
        "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
        
        IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
          get_abort:= TRUE;
        END IF;
    END;

    -- feedback for a bulk of rows
    IF get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey_bulk.DELETE;
      rowkey_bulk_index := 1;
      FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..error_index - 1 LOOP
        get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
        rowkey_bulk_index := rowkey_bulk_index + 1;
      END LOOP;
    END IF;
    
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

    "WDT_WAREHOUSE_ENTITY_ins" := "WDT_WAREHOUSE_ENTITY_ins" + get_rowid.COUNT;
    "WDT_WAREHOUSE_ENTITY_si" := error_index + 1;
  END LOOP;
  END IF;
END IF;


 IF get_use_hc AND NOT firstround THEN
  COMMIT; -- commit no.27
 END IF;
 IF get_use_hc AND NOT get_row_status THEN
 "WDT_WAREHOUSE_ENTITY_ins" := "WDT_WAREHOUSE_ENTITY_ins0"; 
"WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd0";
END IF;

END "DEDUPLICATOR_IN2_DML";

---------------------------------------------------------------------------
-- "DEDUPLICATOR_IN2_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "DEDUPLICATOR_IN2_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
          "WDT_WAREHOUSE_ENTITY_id" :=
            OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"WDT_WAREHOUSE_ENTITY"',
              p_target_uoid=>'011141E13BEEC226E050F00AA3444997',
              p_stm=>'TRACE 831',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
              
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13BEEC226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13BAEC226E050F00AA3444997', -- Operator SPRIDEN
              p_parent_object_name=>'SPRIDEN',
              p_parent_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
              p_parent_object_type=>'Table',
              p_object_name=>'SPRIDEN',
              p_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
              p_object_type=>'Table',
              p_location_uoid=>'F470739246C3BD3EE040F00AA34419FD' -- Location SATURN_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'920EB8309D482331E0440003BAAC9CF3', -- Operator SPRIDEN
              p_parent_object_name=>'SPRIDEN',
              p_parent_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
              p_parent_object_type=>'Table',
              p_object_name=>'SPRIDEN',
              p_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
              p_object_type=>'Table',
              p_location_uoid=>'8876F1DE43B952D4E0440003BAAC9CF3' -- SATURN_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'FD25086D14651128E040F00AA4447097', -- Operator GTVVPDI
              p_parent_object_name=>'GTVVPDI',
              p_parent_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
              p_parent_object_type=>'Table',
              p_object_name=>'GTVVPDI',
              p_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
              p_object_type=>'Table',
              p_location_uoid=>'A93A53C2BC05E953E040F00AA4444B9E' -- BANNER_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'920EB8309FD32331E0440003BAAC9CF3', -- Operator WDT_WAREHOUSE_ENTITY
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'8848749C75C84564E0440003BAAC9CF3' -- EDWMGR_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "DEDUPLICATOR_IN2_si" := 0;
    "WDT_WAREHOUSE_ENTITY_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "DEDUPLICATOR_IN2_SU";

      LOOP
        IF "DEDUPLICATOR_IN2_si" = 0 THEN
          "DEDUPLICATOR_IN2_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "D6_0_S4".COUNT - 1;
          ELSE
            bulk_count := "D6_0_S4".COUNT;
          END IF;
                                        IF bulk_commit THEN
                                                bulk_commit_count := 0;
                                                bulk_commit := FALSE;
                                        END IF;
                                        bulk_commit_count := bulk_commit_count + bulk_count;

 
          IF get_use_hc THEN
            dml_bsize := 0;
            "WDT_WAREHOUSE_ENTITY_ir".DELETE;
"WDT_WAREHOUSE_ENTITY_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "DEDUPLICATOR_IN2_i" := "DEDUPLICATOR_IN2_si";
        BEGIN
          
          LOOP
            EXIT WHEN "WDT_WAREHOUSE_ENTITY_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "DEDUPLICATOR_IN2_i" := "DEDUPLICATOR_IN2_i" + 1;
            "DEDUPLICATOR_IN2_si" := "DEDUPLICATOR_IN2_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "WDT_WAREHOUSE_ENTITY_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("DEDUPLICATOR_IN2_c"%NOTFOUND AND
               "DEDUPLICATOR_IN2_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "DEDUPLICATOR_IN2_i" > bulk_count THEN
            
              "DEDUPLICATOR_IN2_si" := 0;
              EXIT;
            END IF;


            
get_target_name := '"WDT_WAREHOUSE_ENTITY"';
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
            IF NOT "WDT_WAREHOUSE_ENTITY_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"W3_1_B3"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "D6_0_S4"("DEDUPLICATOR_IN2_i");',0,2000);
            error_column := SUBSTRB('"W3_1_B3"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D6_0_S4"("DEDUPLICATOR_IN2_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_1_B3"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "D6_0_S4"("DEDUPLICATOR_IN2_i");
            
            ELSIF get_row_status THEN
              "SV_W3_1_B3" :=
            
            "D6_0_S4"("DEDUPLICATOR_IN2_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W3_13_U2"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "D6_1_G0"("DEDUPLICATOR_IN2_i");',0,2000);
            error_column := SUBSTRB('"W3_13_U2"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D6_1_G0"("DEDUPLICATOR_IN2_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_13_U2"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "D6_1_G0"("DEDUPLICATOR_IN2_i");
            
            ELSIF get_row_status THEN
              "SV_W3_13_U2" :=
            
            "D6_1_G0"("DEDUPLICATOR_IN2_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W3_28_S0"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;',0,2000);
            error_column := SUBSTRB('"W3_28_S0"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */,0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_28_S0"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSIF get_row_status THEN
              "SV_W3_28_S0" :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "WDT_WAREHOUSE_ENTITY_srk"("WDT_WAREHOUSE_ENTITY_i") := get_rowkey + "DEDUPLICATOR_IN2_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_WDT_WAREHOUSE_ENTITY_srk" := get_rowkey + "DEDUPLICATOR_IN2_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "WDT_WAREHOUSE_ENTITY_new" := TRUE;
                ELSE
                  "WDT_WAREHOUSE_ENTITY_i" := "WDT_WAREHOUSE_ENTITY_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "DEDUPLICATOR_IN2_ER"('TRACE 832: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "DEDUPLICATOR_IN2_i");
                  
                  "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
                  
                  IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
              
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("WDT_WAREHOUSE_ENTITY_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "WDT_WAREHOUSE_ENTITY_new" 
            AND (NOT "WDT_WAREHOUSE_ENTITY_nul") THEN
              "WDT_WAREHOUSE_ENTITY_ir"(dml_bsize) := "WDT_WAREHOUSE_ENTITY_i";
            	"W3_1_B3"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_1_B3";
            	"W3_13_U2"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_13_U2";
            	"W3_28_S0"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_28_S0";
              "WDT_WAREHOUSE_ENTITY_srk"("WDT_WAREHOUSE_ENTITY_i") := "SV_WDT_WAREHOUSE_ENTITY_srk";
              "WDT_WAREHOUSE_ENTITY_i" := "WDT_WAREHOUSE_ENTITY_i" + 1;
            ELSE
              "WDT_WAREHOUSE_ENTITY_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "DEDUPLICATOR_IN2_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "DEDUPLICATOR_IN2_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "DEDUPLICATOR_IN2_ER"('TRACE 830: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "DEDUPLICATOR_IN2_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        
  IF NOT "WDT_WAREHOUSE_ENTITY_St" AND bulk_commit_count > get_commit_frequency THEN
            IF NOT (get_audit_level = AUDIT_NONE) THEN
              OWBSYS.WB_RT_MAPAUDIT.auditd_progress(
                p_rtd=>"WDT_WAREHOUSE_ENTITY_id",
                p_sel=>get_map_selected,
                p_ins=>"WDT_WAREHOUSE_ENTITY_ins",
                p_upd=>"WDT_WAREHOUSE_ENTITY_upd",
                p_del=>"WDT_WAREHOUSE_ENTITY_del",
                p_err=>"WDT_WAREHOUSE_ENTITY_err",
                p_dis=>NULL
              );
            END IF;
            IF NOT get_no_commit THEN
              COMMIT; -- commit no.25
              bulk_commit := TRUE;
            END IF;
          END IF;


        cursor_exhausted := "DEDUPLICATOR_IN2_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "DEDUPLICATOR_IN2_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "DEDUPLICATOR_IN2_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "DEDUPLICATOR_IN2_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
IF NOT get_abort AND NOT get_abort_procedure AND NOT get_no_commit THEN
        -- resolve actual owner and name
        OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      
        IF actual_name IS NOT NULL THEN
          SELECT NVL(num_rows, 0) INTO get_map_num_rows
          FROM all_tables
          WHERE table_name = actual_name
          AND owner = actual_owner;
          IF ("WDT_WAREHOUSE_ENTITY_ins" + "WDT_WAREHOUSE_ENTITY_upd" + "WDT_WAREHOUSE_ENTITY_del") >= get_map_num_rows THEN
            a_table_to_analyze.ownname := actual_owner;
            a_table_to_analyze.tabname := actual_name;
            a_table_to_analyze.estimate_percent := 5;
            a_table_to_analyze.granularity := 'ALL';
            a_table_to_analyze.cascade := TRUE;
            a_table_to_analyze.degree  := NULL;
            "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
          END IF;
        END IF;
      END IF;
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
  
  IF NOT "WDT_WAREHOUSE_ENTITY_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      OWBSYS.WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"WDT_WAREHOUSE_ENTITY_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"WDT_WAREHOUSE_ENTITY_ins",
        p_upd=>"WDT_WAREHOUSE_ENTITY_upd",
        p_del=>"WDT_WAREHOUSE_ENTITY_del",
        p_err=>"WDT_WAREHOUSE_ENTITY_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "WDT_WAREHOUSE_ENTITY_ins";
    get_updated  := get_updated  + "WDT_WAREHOUSE_ENTITY_upd";
    get_deleted  := get_deleted  + "WDT_WAREHOUSE_ENTITY_del";
    get_errors   := get_errors   + "WDT_WAREHOUSE_ENTITY_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "DEDUPLICATOR_IN2_p";


-- Procedure "DEDUPLICATOR_0_IN2_p" is the entry point for map "DEDUPLICATOR_0_IN2_p"

PROCEDURE "DEDUPLICATOR_0_IN2_p"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"DEDUPLICATOR_0_IN2_p"';
get_source_name            CONSTANT VARCHAR2(2000) := SUBSTRB('"EDWSTG"."CHG_PERSON"',0,2000);
get_source_uoid            CONSTANT VARCHAR2(2000) := SUBSTRB('',0,2000);
get_step_number            CONSTANT NUMBER(22) := 2;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"WDT_WAREHOUSE_ENTITY_1_id" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_ins" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_upd" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_del" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             OWBSYS.WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_1_srk" OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"WDT_WAREHOUSE_ENTITY_1_ir"  index_redirect_array;
"SV_WDT_WAREHOUSE_ENTITY_1_srk" NUMBER;
"WDT_WAREHOUSE_ENTITY_1_new"  BOOLEAN;
"WDT_WAREHOUSE_ENTITY_1_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
bulk_commit_count          NUMBER(22) := 0;
bulk_commit                BOOLEAN := FALSE;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"DEDUPLICATOR_0_IN2_si" NUMBER(22) := 0;

"DEDUPLICATOR_0_IN2_i" NUMBER(22) := 0;


"WDT_WAREHOUSE_ENTITY_1_si" NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_1_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_D9_0_P6" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DEDUPLICATOR_0_IN2" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_W7_1_B3" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_W7_28_S0" IS TABLE OF VARCHAR2(120) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_D9_0_P6"  NUMBER;
"SV_ROWKEY_DEDUPLICATOR_0_IN2"  VARCHAR2(18);
"SV_W7_1_B3"  NUMBER;
"SV_W7_28_S0"  VARCHAR2(120);

-- Bulk: intermediate collection variables
"D9_0_P6" "T_D9_0_P6";
"ROWKEY_DEDUPLICATOR_0_IN2" "T_ROWKEY_DEDUPLICATOR_0_IN2";
"W7_1_B3" "T_W7_1_B3";
"W7_28_S0" "T_W7_28_S0";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_ES"(error_index IN NUMBER) IS
BEGIN

  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"EDWSTG"."CHG_PERSON"',0,80),
    p_column=>SUBSTR('PERSON_UID',0,80),
    p_value=>SUBSTRB("D9_0_P6"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "DEDUPLICATOR_0_IN2_ES";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_ER" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_ER"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    OWBSYS.WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 833: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    OWBSYS.WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "DEDUPLICATOR_0_IN2_ES"(p_error_index);
  END IF;
END "DEDUPLICATOR_0_IN2_ER";



---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_SU" opens and initializes data source
-- for map "DEDUPLICATOR_0_IN2_p"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_SU" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "DEDUPLICATOR_0_IN2_c"%ISOPEN) THEN
    OPEN "DEDUPLICATOR_0_IN2_c";
  END IF;
  get_read_success := TRUE;
END "DEDUPLICATOR_0_IN2_SU";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_RD" fetches a bulk of rows from
--   the data source for map "DEDUPLICATOR_0_IN2_p"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_RD" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "D9_0_P6".DELETE;

    FETCH
      "DEDUPLICATOR_0_IN2_c"
    BULK COLLECT INTO
      "D9_0_P6"
    LIMIT get_bulk_size;

    get_total_processed_rowcount := get_total_processed_rowcount + "D9_0_P6".COUNT;

    IF "DEDUPLICATOR_0_IN2_c"%NOTFOUND AND "D9_0_P6".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "D9_0_P6".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "D9_0_P6".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        OWBSYS.WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 834: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        OWBSYS.WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "DEDUPLICATOR_0_IN2_RD";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_DML" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_DML"(si NUMBER, firstround BOOLEAN) IS
 "WDT_WAREHOUSE_ENTITY_1_ins0" NUMBER := "WDT_WAREHOUSE_ENTITY_1_ins";
"WDT_WAREHOUSE_ENTITY_1_upd0" NUMBER := "WDT_WAREHOUSE_ENTITY_1_upd";
BEGIN
 IF get_use_hc THEN
  IF firstround AND NOT get_row_status THEN
   RETURN;
  END IF;
  get_row_status := TRUE;
 END IF;
 IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
-- Update/Insert DML for "WDT_WAREHOUSE_ENTITY_1"
  normal_action := 'UPDATE';
  error_action  := 'UPDATE';
  get_target_name := '"WDT_WAREHOUSE_ENTITY_1"';
  get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
  "WDT_WAREHOUSE_ENTITY_1_si" := 1;
  update_bulk.DELETE;
  update_bulk_index := 1;
  IF "WDT_WAREHOUSE_ENTITY_1_i" > get_bulk_size 
 OR "DEDUPLICATOR_0_IN2_c"%NOTFOUND OR get_abort OR get_use_hc THEN
    LOOP
      get_rowid.DELETE;

      BEGIN
        FORALL i IN "WDT_WAREHOUSE_ENTITY_1_si".."WDT_WAREHOUSE_ENTITY_1_i" - 1 
          UPDATE
          /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY_1") */
            "WDT_WAREHOUSE_ENTITY"
          SET

						"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W7_28_S0"
(i)
  
          WHERE

						"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W7_1_B3"
(i)
  
          RETURNING ROWID BULK COLLECT INTO get_rowid;
          
        feedback_bulk_limit := "WDT_WAREHOUSE_ENTITY_1_i" - 1;
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..feedback_bulk_limit LOOP
          IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
            update_bulk(update_bulk_index) := rowkey_index;
            update_bulk_index := update_bulk_index + 1;
          ELSE
            IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
              get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
              rowkey_bulk_index := rowkey_bulk_index + 1;
            END IF;
          END IF;
        END LOOP;
        
        
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

        "WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd" + get_rowid.COUNT;
        "WDT_WAREHOUSE_ENTITY_1_si" := "WDT_WAREHOUSE_ENTITY_1_i";

      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          IF SQL%NOTFOUND THEN
            last_successful_index := 0;
          ELSE
            FOR rowkey_index IN REVERSE "WDT_WAREHOUSE_ENTITY_1_si".."WDT_WAREHOUSE_ENTITY_1_i"- 1 LOOP
              IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                last_successful_index := rowkey_index;
                EXIT;
              END IF;
            END LOOP;
          END IF;
          feedback_bulk_limit := last_successful_index;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
          "WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd" + get_rowid.COUNT;
          IF last_successful_index = 0 THEN
            last_successful_index := "WDT_WAREHOUSE_ENTITY_1_si";
          ELSE
            last_successful_index := last_successful_index +1;
          END IF;
          LOOP
            BEGIN
              UPDATE
              /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY_1") */
                "WDT_WAREHOUSE_ENTITY"
              SET

								"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W7_28_S0"
(last_successful_index)

              WHERE

								"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W7_1_B3"
(last_successful_index)

              ;
            update_bulk(update_bulk_index) := last_successful_index;
            update_bulk_index := update_bulk_index + 1;
            last_successful_index := last_successful_index + 1;
          EXCEPTION
            WHEN OTHERS THEN
                last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                error_rowkey := "WDT_WAREHOUSE_ENTITY_1_srk"(last_successful_index);
                OWBSYS.WB_RT_MAPAUDIT.error(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rtd=>get_audit_detail_id,
                  p_rowkey=>error_rowkey,
                  p_table=>get_target_name,
                  p_column=>'*',
                  p_dstval=>NULL,
                  p_stm=>'TRACE : ' || error_action,
                  p_sqlerr=>SQLCODE,
                  p_sqlerrm=>SQLERRM,
                  p_rowid=>NULL
                );
                get_column_seq := 0;
                

                
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W7_28_S0"(last_successful_index),0,2000));
                
              END IF;
              IF get_audit_level = AUDIT_COMPLETE THEN
                OWBSYS.WB_RT_MAPAUDIT.register_feedback(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rowkey=>error_rowkey,
                  p_status=>'ERROR',
                  p_table=>get_target_name,
                  p_role=>'T',
                  p_action=>error_action
                );
              END IF;
              "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
              
              IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
                get_abort:= TRUE;
              END IF;
              "WDT_WAREHOUSE_ENTITY_1_si" := last_successful_index + 1;
              EXIT;
          END;
        END LOOP;
    END;
    IF "WDT_WAREHOUSE_ENTITY_1_si" >= "WDT_WAREHOUSE_ENTITY_1_i" OR get_abort THEN
      EXIT;
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_1_i" := 1;

  --process leftover inserts
  insert_bulk_index := 0;
  FOR j IN 1..update_bulk.COUNT LOOP
    insert_bulk_index := insert_bulk_index + 1;
		"W7_1_B3"(insert_bulk_index) := "W7_1_B3"(update_bulk(j));
		"W7_28_S0"(insert_bulk_index) := "W7_28_S0"(update_bulk(j));
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      "WDT_WAREHOUSE_ENTITY_1_srk"(insert_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(update_bulk(j));
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_1_si" := 1;
  normal_action := 'INSERT';
  error_action  := 'INSERT';
  LOOP
    EXIT WHEN get_abort OR "WDT_WAREHOUSE_ENTITY_1_si" > insert_bulk_index;
    get_rowid.DELETE;

    BEGIN
      FORALL i IN "WDT_WAREHOUSE_ENTITY_1_si"..insert_bulk_index
        INSERT INTO
          "WDT_WAREHOUSE_ENTITY"
          ("WDT_WAREHOUSE_ENTITY"."BANNER_PIDM",
          "WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS")
        VALUES
          ("W7_1_B3"(i),
          "W7_28_S0"(i))
        RETURNING ROWID BULK COLLECT INTO get_rowid;
      error_index := "WDT_WAREHOUSE_ENTITY_1_si" + get_rowid.COUNT;
    EXCEPTION
      WHEN OTHERS THEN
          last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
        error_index := "WDT_WAREHOUSE_ENTITY_1_si" + get_rowid.COUNT;
        IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
          error_rowkey := "WDT_WAREHOUSE_ENTITY_1_srk"(error_index);
          OWBSYS.WB_RT_MAPAUDIT.error(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rtd=>get_audit_detail_id,
            p_rowkey=>error_rowkey,
            p_table=>get_target_name,
            p_column=>'*',
            p_dstval=>NULL,
            p_stm=>'TRACE 835: ' || error_action,
            p_sqlerr=>SQLCODE,
            p_sqlerrm=>SQLERRM,
            p_rowid=>NULL
          );
          get_column_seq := 0;
          

          
          
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM"',0,80),SUBSTRB("W7_1_B3"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W7_28_S0"(error_index),0,2000));
          
        END IF;
        IF get_audit_level = AUDIT_COMPLETE THEN
          OWBSYS.WB_RT_MAPAUDIT.register_feedback(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rowkey=>error_rowkey,
            p_status=>'ERROR',
            p_table=>get_target_name,
            p_role=>'T',
            p_action=>error_action
          );
        END IF;
        "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
        
        IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
          get_abort:= TRUE;
        END IF;
    END;

    -- feedback for a bulk of rows
    IF get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey_bulk.DELETE;
      rowkey_bulk_index := 1;
      FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..error_index - 1 LOOP
        get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
        rowkey_bulk_index := rowkey_bulk_index + 1;
      END LOOP;
    END IF;
    
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

    "WDT_WAREHOUSE_ENTITY_1_ins" := "WDT_WAREHOUSE_ENTITY_1_ins" + get_rowid.COUNT;
    "WDT_WAREHOUSE_ENTITY_1_si" := error_index + 1;
  END LOOP;
  END IF;
END IF;


 IF get_use_hc AND NOT firstround THEN
  COMMIT; -- commit no.27
 END IF;
 IF get_use_hc AND NOT get_row_status THEN
 "WDT_WAREHOUSE_ENTITY_1_ins" := "WDT_WAREHOUSE_ENTITY_1_ins0"; 
"WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd0";
END IF;

END "DEDUPLICATOR_0_IN2_DML";

---------------------------------------------------------------------------
-- "DEDUPLICATOR_0_IN2_p" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "DEDUPLICATOR_0_IN2_c"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
          "WDT_WAREHOUSE_ENTITY_1_id" :=
            OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"WDT_WAREHOUSE_ENTITY_1"',
              p_target_uoid=>'011141E13C27C226E050F00AA3444997',
              p_stm=>'TRACE 837',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
              
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'DB9733E5DE63CD7DE0401895B8250EA8', -- Operator WDT_WAREHOUSE_ENTITY_1
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'D10E77AFDB2F188FE0401895B8256E77' -- EDWMGR_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'DB9733E5DE31CD7DE0401895B8250EA8', -- Operator CHG_PERSON
              p_parent_object_name=>'CHG_PERSON',
              p_parent_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
              p_parent_object_type=>'Table',
              p_object_name=>'CHG_PERSON',
              p_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
              p_object_type=>'Table',
              p_location_uoid=>'D10E77AFDB4A188FE0401895B8256E77' -- EDWSTG_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13A54C226E050F00AA3444997', -- Operator CHG_PERSON
              p_parent_object_name=>'CHG_PERSON',
              p_parent_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
              p_parent_object_type=>'Table',
              p_object_name=>'CHG_PERSON',
              p_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
              p_object_type=>'Table',
              p_location_uoid=>'F470739246A8BD3EE040F00AA34419FD' -- Location EDWSTG_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13C27C226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY_1
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "DEDUPLICATOR_0_IN2_si" := 0;
    "WDT_WAREHOUSE_ENTITY_1_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "DEDUPLICATOR_0_IN2_SU";

      LOOP
        IF "DEDUPLICATOR_0_IN2_si" = 0 THEN
          "DEDUPLICATOR_0_IN2_RD";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "D9_0_P6".COUNT - 1;
          ELSE
            bulk_count := "D9_0_P6".COUNT;
          END IF;
                                        IF bulk_commit THEN
                                                bulk_commit_count := 0;
                                                bulk_commit := FALSE;
                                        END IF;
                                        bulk_commit_count := bulk_commit_count + bulk_count;

 
          IF get_use_hc THEN
            dml_bsize := 0;
            "WDT_WAREHOUSE_ENTITY_1_ir".DELETE;
"WDT_WAREHOUSE_ENTITY_1_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "DEDUPLICATOR_0_IN2_i" := "DEDUPLICATOR_0_IN2_si";
        BEGIN
          
          LOOP
            EXIT WHEN "WDT_WAREHOUSE_ENTITY_1_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "DEDUPLICATOR_0_IN2_i" := "DEDUPLICATOR_0_IN2_i" + 1;
            "DEDUPLICATOR_0_IN2_si" := "DEDUPLICATOR_0_IN2_i";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "WDT_WAREHOUSE_ENTITY_1_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("DEDUPLICATOR_0_IN2_c"%NOTFOUND AND
               "DEDUPLICATOR_0_IN2_i" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "DEDUPLICATOR_0_IN2_i" > bulk_count THEN
            
              "DEDUPLICATOR_0_IN2_si" := 0;
              EXIT;
            END IF;


            
get_target_name := '"WDT_WAREHOUSE_ENTITY_1"';
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
            IF NOT "WDT_WAREHOUSE_ENTITY_1_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"W7_1_B3"("WDT_WAREHOUSE_ENTITY_1_i") := 
            
            "D9_0_P6"("DEDUPLICATOR_0_IN2_i");',0,2000);
            error_column := SUBSTRB('"W7_1_B3"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D9_0_P6"("DEDUPLICATOR_0_IN2_i"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W7_1_B3"("WDT_WAREHOUSE_ENTITY_1_i") :=
            
            "D9_0_P6"("DEDUPLICATOR_0_IN2_i");
            
            ELSIF get_row_status THEN
              "SV_W7_1_B3" :=
            
            "D9_0_P6"("DEDUPLICATOR_0_IN2_i");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W7_28_S0"("WDT_WAREHOUSE_ENTITY_1_i") := 
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;',0,2000);
            error_column := SUBSTRB('"W7_28_S0"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */,0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W7_28_S0"("WDT_WAREHOUSE_ENTITY_1_i") :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSIF get_row_status THEN
              "SV_W7_28_S0" :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "WDT_WAREHOUSE_ENTITY_1_srk"("WDT_WAREHOUSE_ENTITY_1_i") := get_rowkey + "DEDUPLICATOR_0_IN2_i" - 1;
                  ELSIF get_row_status THEN
                    "SV_WDT_WAREHOUSE_ENTITY_1_srk" := get_rowkey + "DEDUPLICATOR_0_IN2_i" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "WDT_WAREHOUSE_ENTITY_1_new" := TRUE;
                ELSE
                  "WDT_WAREHOUSE_ENTITY_1_i" := "WDT_WAREHOUSE_ENTITY_1_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "DEDUPLICATOR_0_IN2_ER"('TRACE 838: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "DEDUPLICATOR_0_IN2_i");
                  
                  "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
                  
                  IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
              
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("WDT_WAREHOUSE_ENTITY_1_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "WDT_WAREHOUSE_ENTITY_1_new" 
            AND (NOT "WDT_WAREHOUSE_ENTITY_1_nul") THEN
              "WDT_WAREHOUSE_ENTITY_1_ir"(dml_bsize) := "WDT_WAREHOUSE_ENTITY_1_i";
            	"W7_1_B3"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_W7_1_B3";
            	"W7_28_S0"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_W7_28_S0";
              "WDT_WAREHOUSE_ENTITY_1_srk"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_WDT_WAREHOUSE_ENTITY_1_srk";
              "WDT_WAREHOUSE_ENTITY_1_i" := "WDT_WAREHOUSE_ENTITY_1_i" + 1;
            ELSE
              "WDT_WAREHOUSE_ENTITY_1_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "DEDUPLICATOR_0_IN2_DML"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "DEDUPLICATOR_0_IN2_DML"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "DEDUPLICATOR_0_IN2_ER"('TRACE 836: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "DEDUPLICATOR_0_IN2_i");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        
  IF NOT "WDT_WAREHOUSE_ENTITY_1_St" AND bulk_commit_count > get_commit_frequency THEN
            IF NOT (get_audit_level = AUDIT_NONE) THEN
              OWBSYS.WB_RT_MAPAUDIT.auditd_progress(
                p_rtd=>"WDT_WAREHOUSE_ENTITY_1_id",
                p_sel=>get_map_selected,
                p_ins=>"WDT_WAREHOUSE_ENTITY_1_ins",
                p_upd=>"WDT_WAREHOUSE_ENTITY_1_upd",
                p_del=>"WDT_WAREHOUSE_ENTITY_1_del",
                p_err=>"WDT_WAREHOUSE_ENTITY_1_err",
                p_dis=>NULL
              );
            END IF;
            IF NOT get_no_commit THEN
              COMMIT; -- commit no.25
              bulk_commit := TRUE;
            END IF;
          END IF;


        cursor_exhausted := "DEDUPLICATOR_0_IN2_c"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "DEDUPLICATOR_0_IN2_i" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "DEDUPLICATOR_0_IN2_i" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "DEDUPLICATOR_0_IN2_c";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
IF NOT get_abort AND NOT get_abort_procedure AND NOT get_no_commit THEN
        -- resolve actual owner and name
        OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      
        IF actual_name IS NOT NULL THEN
          SELECT NVL(num_rows, 0) INTO get_map_num_rows
          FROM all_tables
          WHERE table_name = actual_name
          AND owner = actual_owner;
          IF ("WDT_WAREHOUSE_ENTITY_1_ins" + "WDT_WAREHOUSE_ENTITY_1_upd" + "WDT_WAREHOUSE_ENTITY_1_del") >= get_map_num_rows THEN
            a_table_to_analyze.ownname := actual_owner;
            a_table_to_analyze.tabname := actual_name;
            a_table_to_analyze.estimate_percent := 5;
            a_table_to_analyze.granularity := 'ALL';
            a_table_to_analyze.cascade := TRUE;
            a_table_to_analyze.degree  := NULL;
            "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
          END IF;
        END IF;
      END IF;
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
  
  IF NOT "WDT_WAREHOUSE_ENTITY_1_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      OWBSYS.WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"WDT_WAREHOUSE_ENTITY_1_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"WDT_WAREHOUSE_ENTITY_1_ins",
        p_upd=>"WDT_WAREHOUSE_ENTITY_1_upd",
        p_del=>"WDT_WAREHOUSE_ENTITY_1_del",
        p_err=>"WDT_WAREHOUSE_ENTITY_1_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "WDT_WAREHOUSE_ENTITY_1_ins";
    get_updated  := get_updated  + "WDT_WAREHOUSE_ENTITY_1_upd";
    get_deleted  := get_deleted  + "WDT_WAREHOUSE_ENTITY_1_del";
    get_errors   := get_errors   + "WDT_WAREHOUSE_ENTITY_1_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "DEDUPLICATOR_0_IN2_p";



-- Procedure "DEDUPLICATOR_IN2_t" is the entry point for map "DEDUPLICATOR_IN2_t"

PROCEDURE "DEDUPLICATOR_IN2_t"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"DEDUPLICATOR_IN2_t"';
get_source_name            CONSTANT VARCHAR2(2000) := SUBSTRB('"GTVVPDI","SATURN"."SPRIDEN"',0,2000);
get_source_uoid            CONSTANT VARCHAR2(2000) := SUBSTRB('',0,2000);
get_step_number            CONSTANT NUMBER(22) := 1;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"WDT_WAREHOUSE_ENTITY_id" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_ins" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_upd" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_del" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             OWBSYS.WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_srk" OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"WDT_WAREHOUSE_ENTITY_ir"  index_redirect_array;
"SV_WDT_WAREHOUSE_ENTITY_srk" NUMBER;
"WDT_WAREHOUSE_ENTITY_new"  BOOLEAN;
"WDT_WAREHOUSE_ENTITY_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
bulk_commit_count          NUMBER(22) := 0;
bulk_commit                BOOLEAN := FALSE;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"DEDUPLICATOR_IN2_si$1" NUMBER(22) := 0;

"DEDUPLICATOR_IN2_i$1" NUMBER(22) := 0;


"WDT_WAREHOUSE_ENTITY_si" NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_D6_0_S4$1" IS TABLE OF NUMBER(8) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DEDUPLICATOR_IN2$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_D6_1_G0$1" IS TABLE OF VARCHAR2(24) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_W3_1_B3$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_W3_13_U2$1" IS TABLE OF VARCHAR2(252) INDEX BY BINARY_INTEGER;
TYPE "T_W3_28_S0$1" IS TABLE OF VARCHAR2(120) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_D6_0_S4$1"  NUMBER(8);
"SV_ROWKEY_DEDUPLICATOR_IN2$1"  VARCHAR2(18);
"SV_D6_1_G0$1"  VARCHAR2(24);
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_W3_1_B3$1"  NUMBER;
"SV_W3_13_U2$1"  VARCHAR2(252);
"SV_W3_28_S0$1"  VARCHAR2(120);

-- Bulk: intermediate collection variables
"D6_0_S4$1" "T_D6_0_S4$1";
"ROWKEY_DEDUPLICATOR_IN2$1" "T_ROWKEY_DEDUPLICATOR_IN2$1";
"D6_1_G0$1" "T_D6_1_G0$1";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"W3_1_B3$1" "T_W3_1_B3$1";
"W3_13_U2$1" "T_W3_13_U2$1";
"W3_28_S0$1" "T_W3_28_S0$1";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_ES$1"(error_index IN NUMBER) IS
BEGIN

  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"GTVVPDI","SATURN"."SPRIDEN"',0,80),
    p_column=>SUBSTR('SPRIDEN_PIDM',0,80),
    p_value=>SUBSTRB("D6_0_S4$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>2,
    p_instance=>1,
    p_table=>SUBSTR('"GTVVPDI","SATURN"."SPRIDEN"',0,80),
    p_column=>SUBSTR('GTVVPDI_CODE',0,80),
    p_value=>SUBSTRB("D6_1_G0$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "DEDUPLICATOR_IN2_ES$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    OWBSYS.WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 839: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    OWBSYS.WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "DEDUPLICATOR_IN2_ES$1"(p_error_index);
  END IF;
END "DEDUPLICATOR_IN2_ER$1";



---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_SU$1" opens and initializes data source
-- for map "DEDUPLICATOR_IN2_t"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "DEDUPLICATOR_IN2_c$1"%ISOPEN) THEN
    OPEN "DEDUPLICATOR_IN2_c$1";
  END IF;
  get_read_success := TRUE;
END "DEDUPLICATOR_IN2_SU$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_RD$1" fetches a bulk of rows from
--   the data source for map "DEDUPLICATOR_IN2_t"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "D6_0_S4$1".DELETE;
    "D6_1_G0$1".DELETE;

    FETCH
      "DEDUPLICATOR_IN2_c$1"
    BULK COLLECT INTO
      "D6_0_S4$1",
      "D6_1_G0$1"
    LIMIT get_bulk_size;

    get_total_processed_rowcount := get_total_processed_rowcount + "D6_0_S4$1".COUNT;

    IF "DEDUPLICATOR_IN2_c$1"%NOTFOUND AND "D6_0_S4$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "D6_0_S4$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "D6_0_S4$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        OWBSYS.WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 840: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        OWBSYS.WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "DEDUPLICATOR_IN2_RD$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_IN2_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_IN2_DML$1"(si NUMBER, firstround BOOLEAN) IS
 "WDT_WAREHOUSE_ENTITY_ins0" NUMBER := "WDT_WAREHOUSE_ENTITY_ins";
"WDT_WAREHOUSE_ENTITY_upd0" NUMBER := "WDT_WAREHOUSE_ENTITY_upd";
BEGIN
 IF get_use_hc THEN
  IF firstround AND NOT get_row_status THEN
   RETURN;
  END IF;
  get_row_status := TRUE;
 END IF;
 IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
-- Update/Insert DML for "WDT_WAREHOUSE_ENTITY"
  normal_action := 'UPDATE';
  error_action  := 'UPDATE';
  get_target_name := '"WDT_WAREHOUSE_ENTITY"';
  get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
  "WDT_WAREHOUSE_ENTITY_si" := 1;
  update_bulk.DELETE;
  update_bulk_index := 1;
  IF "WDT_WAREHOUSE_ENTITY_i" > get_bulk_size 
 OR "DEDUPLICATOR_IN2_c$1"%NOTFOUND OR get_abort OR get_use_hc THEN
    LOOP
      get_rowid.DELETE;

      BEGIN
        FORALL i IN "WDT_WAREHOUSE_ENTITY_si".."WDT_WAREHOUSE_ENTITY_i" - 1 
          UPDATE
          /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY") */
            "WDT_WAREHOUSE_ENTITY"
          SET

						"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01" = "W3_13_U2$1"
(i),						"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W3_28_S0$1"
(i)
  
          WHERE

						"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W3_1_B3$1"
(i)
  
          RETURNING ROWID BULK COLLECT INTO get_rowid;
          
        feedback_bulk_limit := "WDT_WAREHOUSE_ENTITY_i" - 1;
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..feedback_bulk_limit LOOP
          IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
            update_bulk(update_bulk_index) := rowkey_index;
            update_bulk_index := update_bulk_index + 1;
          ELSE
            IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
              get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
              rowkey_bulk_index := rowkey_bulk_index + 1;
            END IF;
          END IF;
        END LOOP;
        
        
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

        "WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd" + get_rowid.COUNT;
        "WDT_WAREHOUSE_ENTITY_si" := "WDT_WAREHOUSE_ENTITY_i";

      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          IF SQL%NOTFOUND THEN
            last_successful_index := 0;
          ELSE
            FOR rowkey_index IN REVERSE "WDT_WAREHOUSE_ENTITY_si".."WDT_WAREHOUSE_ENTITY_i"- 1 LOOP
              IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                last_successful_index := rowkey_index;
                EXIT;
              END IF;
            END LOOP;
          END IF;
          feedback_bulk_limit := last_successful_index;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
          "WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd" + get_rowid.COUNT;
          IF last_successful_index = 0 THEN
            last_successful_index := "WDT_WAREHOUSE_ENTITY_si";
          ELSE
            last_successful_index := last_successful_index +1;
          END IF;
          LOOP
            BEGIN
              UPDATE
              /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY") */
                "WDT_WAREHOUSE_ENTITY"
              SET

								"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01" = "W3_13_U2$1"
(last_successful_index),								"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W3_28_S0$1"
(last_successful_index)

              WHERE

								"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W3_1_B3$1"
(last_successful_index)

              ;
            update_bulk(update_bulk_index) := last_successful_index;
            update_bulk_index := update_bulk_index + 1;
            last_successful_index := last_successful_index + 1;
          EXCEPTION
            WHEN OTHERS THEN
                last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                error_rowkey := "WDT_WAREHOUSE_ENTITY_srk"(last_successful_index);
                OWBSYS.WB_RT_MAPAUDIT.error(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rtd=>get_audit_detail_id,
                  p_rowkey=>error_rowkey,
                  p_table=>get_target_name,
                  p_column=>'*',
                  p_dstval=>NULL,
                  p_stm=>'TRACE : ' || error_action,
                  p_sqlerr=>SQLCODE,
                  p_sqlerrm=>SQLERRM,
                  p_rowid=>NULL
                );
                get_column_seq := 0;
                

                
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01"',0,80),SUBSTRB("W3_13_U2$1"(last_successful_index),0,2000));
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W3_28_S0$1"(last_successful_index),0,2000));
                
              END IF;
              IF get_audit_level = AUDIT_COMPLETE THEN
                OWBSYS.WB_RT_MAPAUDIT.register_feedback(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rowkey=>error_rowkey,
                  p_status=>'ERROR',
                  p_table=>get_target_name,
                  p_role=>'T',
                  p_action=>error_action
                );
              END IF;
              "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
              
              IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
                get_abort:= TRUE;
              END IF;
              "WDT_WAREHOUSE_ENTITY_si" := last_successful_index + 1;
              EXIT;
          END;
        END LOOP;
    END;
    IF "WDT_WAREHOUSE_ENTITY_si" >= "WDT_WAREHOUSE_ENTITY_i" OR get_abort THEN
      EXIT;
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_i" := 1;

  --process leftover inserts
  insert_bulk_index := 0;
  FOR j IN 1..update_bulk.COUNT LOOP
    insert_bulk_index := insert_bulk_index + 1;
		"W3_1_B3$1"(insert_bulk_index) := "W3_1_B3$1"(update_bulk(j));
		"W3_13_U2$1"(insert_bulk_index) := "W3_13_U2$1"(update_bulk(j));
		"W3_28_S0$1"(insert_bulk_index) := "W3_28_S0$1"(update_bulk(j));
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      "WDT_WAREHOUSE_ENTITY_srk"(insert_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(update_bulk(j));
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_si" := 1;
  normal_action := 'INSERT';
  error_action  := 'INSERT';
  LOOP
    EXIT WHEN get_abort OR "WDT_WAREHOUSE_ENTITY_si" > insert_bulk_index;
    get_rowid.DELETE;

    BEGIN
      FORALL i IN "WDT_WAREHOUSE_ENTITY_si"..insert_bulk_index
        INSERT INTO
          "WDT_WAREHOUSE_ENTITY"
          ("WDT_WAREHOUSE_ENTITY"."BANNER_PIDM",
          "WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01",
          "WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS")
        VALUES
          ("W3_1_B3$1"(i),
          "W3_13_U2$1"(i),
          "W3_28_S0$1"(i))
        RETURNING ROWID BULK COLLECT INTO get_rowid;
      error_index := "WDT_WAREHOUSE_ENTITY_si" + get_rowid.COUNT;
    EXCEPTION
      WHEN OTHERS THEN
          last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
        error_index := "WDT_WAREHOUSE_ENTITY_si" + get_rowid.COUNT;
        IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
          error_rowkey := "WDT_WAREHOUSE_ENTITY_srk"(error_index);
          OWBSYS.WB_RT_MAPAUDIT.error(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rtd=>get_audit_detail_id,
            p_rowkey=>error_rowkey,
            p_table=>get_target_name,
            p_column=>'*',
            p_dstval=>NULL,
            p_stm=>'TRACE 841: ' || error_action,
            p_sqlerr=>SQLCODE,
            p_sqlerrm=>SQLERRM,
            p_rowid=>NULL
          );
          get_column_seq := 0;
          

          
          
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM"',0,80),SUBSTRB("W3_1_B3$1"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."USER_ATTRIBUTE_01"',0,80),SUBSTRB("W3_13_U2$1"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W3_28_S0$1"(error_index),0,2000));
          
        END IF;
        IF get_audit_level = AUDIT_COMPLETE THEN
          OWBSYS.WB_RT_MAPAUDIT.register_feedback(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rowkey=>error_rowkey,
            p_status=>'ERROR',
            p_table=>get_target_name,
            p_role=>'T',
            p_action=>error_action
          );
        END IF;
        "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
        
        IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
          get_abort:= TRUE;
        END IF;
    END;

    -- feedback for a bulk of rows
    IF get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey_bulk.DELETE;
      rowkey_bulk_index := 1;
      FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_si"..error_index - 1 LOOP
        get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_srk"(rowkey_index);
        rowkey_bulk_index := rowkey_bulk_index + 1;
      END LOOP;
    END IF;
    
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

    "WDT_WAREHOUSE_ENTITY_ins" := "WDT_WAREHOUSE_ENTITY_ins" + get_rowid.COUNT;
    "WDT_WAREHOUSE_ENTITY_si" := error_index + 1;
  END LOOP;
  END IF;
END IF;


 IF get_use_hc AND NOT firstround THEN
  COMMIT; -- commit no.27
 END IF;
 IF get_use_hc AND NOT get_row_status THEN
 "WDT_WAREHOUSE_ENTITY_ins" := "WDT_WAREHOUSE_ENTITY_ins0"; 
"WDT_WAREHOUSE_ENTITY_upd" := "WDT_WAREHOUSE_ENTITY_upd0";
END IF;

END "DEDUPLICATOR_IN2_DML$1";

---------------------------------------------------------------------------
-- "DEDUPLICATOR_IN2_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "DEDUPLICATOR_IN2_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "WDT_WAREHOUSE_ENTITY_St" THEN
          "WDT_WAREHOUSE_ENTITY_id" :=
            OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"WDT_WAREHOUSE_ENTITY"',
              p_target_uoid=>'011141E13BEEC226E050F00AA3444997',
              p_stm=>'TRACE 843',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
              
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13BEEC226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13BAEC226E050F00AA3444997', -- Operator SPRIDEN
              p_parent_object_name=>'SPRIDEN',
              p_parent_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
              p_parent_object_type=>'Table',
              p_object_name=>'SPRIDEN',
              p_object_uoid=>'011141E1180EC226E050F00AA3444997', -- Table SPRIDEN
              p_object_type=>'Table',
              p_location_uoid=>'F470739246C3BD3EE040F00AA34419FD' -- Location SATURN_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'920EB8309D482331E0440003BAAC9CF3', -- Operator SPRIDEN
              p_parent_object_name=>'SPRIDEN',
              p_parent_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
              p_parent_object_type=>'Table',
              p_object_name=>'SPRIDEN',
              p_object_uoid=>'920EB8309C692331E0440003BAAC9CF3', -- Table SPRIDEN
              p_object_type=>'Table',
              p_location_uoid=>'8876F1DE43B952D4E0440003BAAC9CF3' -- SATURN_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'FD25086D14651128E040F00AA4447097', -- Operator GTVVPDI
              p_parent_object_name=>'GTVVPDI',
              p_parent_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
              p_parent_object_type=>'Table',
              p_object_name=>'GTVVPDI',
              p_object_uoid=>'FD25086D144F1128E040F00AA4447097', -- Table GTVVPDI
              p_object_type=>'Table',
              p_location_uoid=>'A93A53C2BC05E953E040F00AA4444B9E' -- BANNER_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'920EB8309FD32331E0440003BAAC9CF3', -- Operator WDT_WAREHOUSE_ENTITY
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'920EB8309CE12331E0440003BAAC9CF3', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'8848749C75C84564E0440003BAAC9CF3' -- EDWMGR_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "DEDUPLICATOR_IN2_si$1" := 0;
    "WDT_WAREHOUSE_ENTITY_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "DEDUPLICATOR_IN2_SU$1";

      LOOP
        IF "DEDUPLICATOR_IN2_si$1" = 0 THEN
          "DEDUPLICATOR_IN2_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "D6_0_S4$1".COUNT - 1;
          ELSE
            bulk_count := "D6_0_S4$1".COUNT;
          END IF;
                                        IF bulk_commit THEN
                                                bulk_commit_count := 0;
                                                bulk_commit := FALSE;
                                        END IF;
                                        bulk_commit_count := bulk_commit_count + bulk_count;

 
          IF get_use_hc THEN
            dml_bsize := 0;
            "WDT_WAREHOUSE_ENTITY_ir".DELETE;
"WDT_WAREHOUSE_ENTITY_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "DEDUPLICATOR_IN2_i$1" := "DEDUPLICATOR_IN2_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "WDT_WAREHOUSE_ENTITY_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "DEDUPLICATOR_IN2_i$1" := "DEDUPLICATOR_IN2_i$1" + 1;
            "DEDUPLICATOR_IN2_si$1" := "DEDUPLICATOR_IN2_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "WDT_WAREHOUSE_ENTITY_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("DEDUPLICATOR_IN2_c$1"%NOTFOUND AND
               "DEDUPLICATOR_IN2_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "DEDUPLICATOR_IN2_i$1" > bulk_count THEN
            
              "DEDUPLICATOR_IN2_si$1" := 0;
              EXIT;
            END IF;


            
get_target_name := '"WDT_WAREHOUSE_ENTITY"';
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_id";
            IF NOT "WDT_WAREHOUSE_ENTITY_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"W3_1_B3$1"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "D6_0_S4$1"("DEDUPLICATOR_IN2_i$1");',0,2000);
            error_column := SUBSTRB('"W3_1_B3$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D6_0_S4$1"("DEDUPLICATOR_IN2_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_1_B3$1"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "D6_0_S4$1"("DEDUPLICATOR_IN2_i$1");
            
            ELSIF get_row_status THEN
              "SV_W3_1_B3$1" :=
            
            "D6_0_S4$1"("DEDUPLICATOR_IN2_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W3_13_U2$1"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "D6_1_G0$1"("DEDUPLICATOR_IN2_i$1");',0,2000);
            error_column := SUBSTRB('"W3_13_U2$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D6_1_G0$1"("DEDUPLICATOR_IN2_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_13_U2$1"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "D6_1_G0$1"("DEDUPLICATOR_IN2_i$1");
            
            ELSIF get_row_status THEN
              "SV_W3_13_U2$1" :=
            
            "D6_1_G0$1"("DEDUPLICATOR_IN2_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W3_28_S0$1"("WDT_WAREHOUSE_ENTITY_i") := 
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;',0,2000);
            error_column := SUBSTRB('"W3_28_S0$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */,0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W3_28_S0$1"("WDT_WAREHOUSE_ENTITY_i") :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSIF get_row_status THEN
              "SV_W3_28_S0$1" :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "WDT_WAREHOUSE_ENTITY_srk"("WDT_WAREHOUSE_ENTITY_i") := get_rowkey + "DEDUPLICATOR_IN2_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_WDT_WAREHOUSE_ENTITY_srk" := get_rowkey + "DEDUPLICATOR_IN2_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "WDT_WAREHOUSE_ENTITY_new" := TRUE;
                ELSE
                  "WDT_WAREHOUSE_ENTITY_i" := "WDT_WAREHOUSE_ENTITY_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "DEDUPLICATOR_IN2_ER$1"('TRACE 844: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "DEDUPLICATOR_IN2_i$1");
                  
                  "WDT_WAREHOUSE_ENTITY_err" := "WDT_WAREHOUSE_ENTITY_err" + 1;
                  
                  IF get_errors + "WDT_WAREHOUSE_ENTITY_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
              
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("WDT_WAREHOUSE_ENTITY_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "WDT_WAREHOUSE_ENTITY_new" 
            AND (NOT "WDT_WAREHOUSE_ENTITY_nul") THEN
              "WDT_WAREHOUSE_ENTITY_ir"(dml_bsize) := "WDT_WAREHOUSE_ENTITY_i";
            	"W3_1_B3$1"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_1_B3$1";
            	"W3_13_U2$1"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_13_U2$1";
            	"W3_28_S0$1"("WDT_WAREHOUSE_ENTITY_i") := "SV_W3_28_S0$1";
              "WDT_WAREHOUSE_ENTITY_srk"("WDT_WAREHOUSE_ENTITY_i") := "SV_WDT_WAREHOUSE_ENTITY_srk";
              "WDT_WAREHOUSE_ENTITY_i" := "WDT_WAREHOUSE_ENTITY_i" + 1;
            ELSE
              "WDT_WAREHOUSE_ENTITY_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "DEDUPLICATOR_IN2_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "DEDUPLICATOR_IN2_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "DEDUPLICATOR_IN2_ER$1"('TRACE 842: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "DEDUPLICATOR_IN2_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        
  IF NOT "WDT_WAREHOUSE_ENTITY_St" AND bulk_commit_count > get_commit_frequency THEN
            IF NOT (get_audit_level = AUDIT_NONE) THEN
              OWBSYS.WB_RT_MAPAUDIT.auditd_progress(
                p_rtd=>"WDT_WAREHOUSE_ENTITY_id",
                p_sel=>get_map_selected,
                p_ins=>"WDT_WAREHOUSE_ENTITY_ins",
                p_upd=>"WDT_WAREHOUSE_ENTITY_upd",
                p_del=>"WDT_WAREHOUSE_ENTITY_del",
                p_err=>"WDT_WAREHOUSE_ENTITY_err",
                p_dis=>NULL
              );
            END IF;
            IF NOT get_no_commit THEN
              COMMIT; -- commit no.25
              bulk_commit := TRUE;
            END IF;
          END IF;


        cursor_exhausted := "DEDUPLICATOR_IN2_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "DEDUPLICATOR_IN2_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "DEDUPLICATOR_IN2_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "DEDUPLICATOR_IN2_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
IF NOT get_abort AND NOT get_abort_procedure AND NOT get_no_commit THEN
        -- resolve actual owner and name
        OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      
        IF actual_name IS NOT NULL THEN
          SELECT NVL(num_rows, 0) INTO get_map_num_rows
          FROM all_tables
          WHERE table_name = actual_name
          AND owner = actual_owner;
          IF ("WDT_WAREHOUSE_ENTITY_ins" + "WDT_WAREHOUSE_ENTITY_upd" + "WDT_WAREHOUSE_ENTITY_del") >= get_map_num_rows THEN
            a_table_to_analyze.ownname := actual_owner;
            a_table_to_analyze.tabname := actual_name;
            a_table_to_analyze.estimate_percent := 5;
            a_table_to_analyze.granularity := 'ALL';
            a_table_to_analyze.cascade := TRUE;
            a_table_to_analyze.degree  := NULL;
            "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
          END IF;
        END IF;
      END IF;
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
  
  IF NOT "WDT_WAREHOUSE_ENTITY_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      OWBSYS.WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"WDT_WAREHOUSE_ENTITY_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"WDT_WAREHOUSE_ENTITY_ins",
        p_upd=>"WDT_WAREHOUSE_ENTITY_upd",
        p_del=>"WDT_WAREHOUSE_ENTITY_del",
        p_err=>"WDT_WAREHOUSE_ENTITY_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "WDT_WAREHOUSE_ENTITY_ins";
    get_updated  := get_updated  + "WDT_WAREHOUSE_ENTITY_upd";
    get_deleted  := get_deleted  + "WDT_WAREHOUSE_ENTITY_del";
    get_errors   := get_errors   + "WDT_WAREHOUSE_ENTITY_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "DEDUPLICATOR_IN2_t";


-- Procedure "DEDUPLICATOR_0_IN2_t" is the entry point for map "DEDUPLICATOR_0_IN2_t"

PROCEDURE "DEDUPLICATOR_0_IN2_t"
("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY')) IS
-- Constants for this map
get_map_name               CONSTANT VARCHAR2(40) := '"DEDUPLICATOR_0_IN2_t"';
get_source_name            CONSTANT VARCHAR2(2000) := SUBSTRB('"EDWSTG"."CHG_PERSON"',0,2000);
get_source_uoid            CONSTANT VARCHAR2(2000) := SUBSTRB('',0,2000);
get_step_number            CONSTANT NUMBER(22) := 2;

cursor_exhausted           BOOLEAN := FALSE;
get_close_cursor           BOOLEAN := TRUE;
exit_loop_normal           BOOLEAN := FALSE;
exit_loop_early            BOOLEAN := FALSE;
loop_count                 NUMBER(22);

get_map_selected           NUMBER(22) := 0;
get_map_errors             NUMBER(22) := 0;
get_map_num_rows           NUMBER(22) := 0;
actual_owner               VARCHAR2(30);
actual_name                VARCHAR2(30);

-- Constraint management
num_fk_err                 NUMBER(22);
l_rowkey                   NUMBER(22) := 0;
l_table                    VARCHAR2(30) := 'CREATE';
l_rowid                    ROWID;
l_owner                    VARCHAR2(30);
l_tablename                VARCHAR2(30);
l_constraint               VARCHAR2(30);
l_exec_mode                BINARY_INTEGER := MODE_ROW_TARGET;
sql_excp_stmt              VARCHAR2(32767);
TYPE exceptionsCurType IS REF CURSOR;
exceptions_cursor          exceptionsCurType;

normal_action              VARCHAR2(20);
extended_action            VARCHAR2(2000);
error_action               VARCHAR2(20);
-- The get_audit_detail_id variable has been moved to a package-level variable
-- get_audit_detail_id        NUMBER(22) := 0;
get_target_name            VARCHAR2(80);
error_column               VARCHAR2(80);
error_value                VARCHAR2(2000);
error_rowkey               NUMBER(22) := 0;

-- Scalar variables for auditing

"WDT_WAREHOUSE_ENTITY_1_id" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_ins" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_upd" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_del" NUMBER(22) := 0;
"WDT_WAREHOUSE_ENTITY_1_err" NUMBER(22) := 0;
-- Variables for auditing in bulk processing
one_rowkey            NUMBER(22) := 0;
get_rowkey            NUMBER(22) := 0;
get_rowkey_bulk       OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
one_rowid             ROWID;
get_rowid             OWBSYS.WB_RT_MAPAUDIT.ROWIDLIST;
rowkey_bulk_index     NUMBER(22) := 0;
x_it_err_count        NUMBER(22) := 0;
get_rowkey_error      NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_1_srk" OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;

-- Helper variables for implementing the correlated commit mechanism
TYPE index_redirect_array IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;

"WDT_WAREHOUSE_ENTITY_1_ir"  index_redirect_array;
"SV_WDT_WAREHOUSE_ENTITY_1_srk" NUMBER;
"WDT_WAREHOUSE_ENTITY_1_new"  BOOLEAN;
"WDT_WAREHOUSE_ENTITY_1_nul"  BOOLEAN := FALSE;

-- Bulk processing
error_index                NUMBER(22);
update_bulk                OWBSYS.WB_RT_MAPAUDIT.NUMBERLIST;
update_bulk_index          NUMBER(22) := 0;
insert_bulk_index          NUMBER(22) := 0;
last_successful_index      NUMBER(22) := 0;
feedback_bulk_limit        NUMBER(22) := 0;
bulk_commit_count          NUMBER(22) := 0;
bulk_commit                BOOLEAN := FALSE;
get_row_status             BOOLEAN; 
dml_bsize                  NUMBER; 
row_count                  NUMBER(22);
bulk_count                 NUMBER(22);

"DEDUPLICATOR_0_IN2_si$1" NUMBER(22) := 0;

"DEDUPLICATOR_0_IN2_i$1" NUMBER(22) := 0;


"WDT_WAREHOUSE_ENTITY_1_si" NUMBER(22) := 0;

"WDT_WAREHOUSE_ENTITY_1_i" NUMBER(22) := 0;




-- Bulk: types for collection variables
TYPE "T_D9_0_P6$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DEDUPLICATOR_0_IN2$1" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_ROWKEY_DUMMY_TABLE_CURSOR" IS TABLE OF VARCHAR2(18) INDEX BY BINARY_INTEGER;
TYPE "T_W7_1_B3$1" IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
TYPE "T_W7_28_S0$1" IS TABLE OF VARCHAR2(120) INDEX BY BINARY_INTEGER;

-- Bulk: intermediate scalar variables
"SV_D9_0_P6$1"  NUMBER;
"SV_ROWKEY_DEDUPLICATOR_0_IN2$1"  VARCHAR2(18);
"SV_ROWKEY_DUMMY_TABLE_CURSOR"  VARCHAR2(18);
"SV_W7_1_B3$1"  NUMBER;
"SV_W7_28_S0$1"  VARCHAR2(120);

-- Bulk: intermediate collection variables
"D9_0_P6$1" "T_D9_0_P6$1";
"ROWKEY_DEDUPLICATOR_0_IN2$1" "T_ROWKEY_DEDUPLICATOR_0_IN2$1";
"ROWKEY_DUMMY_TABLE_CURSOR" "T_ROWKEY_DUMMY_TABLE_CURSOR";
"W7_1_B3$1" "T_W7_1_B3$1";
"W7_28_S0$1" "T_W7_28_S0$1";

PROCEDURE Main_ES(p_step_number IN NUMBER, p_rowkey IN NUMBER, p_table IN VARCHAR2, p_col IN VARCHAR2, p_value IN VARCHAR2 default 'VALUE DISABLED') IS
BEGIN
  get_column_seq := get_column_seq + 1;
  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>p_rowkey,
    p_seq=>get_column_seq,
    p_instance=>1,
    p_table=>SUBSTR(p_table,0,80),
    p_column=>SUBSTR(p_col,0,80),
    p_value=>SUBSTRB(p_value,0,2000),
    p_step=>p_step_number,
    p_role=>'T'
  );
END;

---------------------------------------------------------------------------
-- This procedure records column values of one erroneous source row
-- into an audit trail table named WB_RT_ERROR_SOURCES.  Each column is
-- recorded by one row in the audit trail.  To collect all source column
-- values corresponding to one erroneous source row, query the audit
-- trail and specify:
--    RTA_IID, uniquely identifies one audited run,
--    RTE_ROWKEY, uniquely identifies a source row within and audited run
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_ES$1"(error_index IN NUMBER) IS
BEGIN

  OWBSYS.WB_RT_MAPAUDIT.error_source(
    p_rta=>get_runtime_audit_id,
    p_rowkey=>get_rowkey + error_index - 1,
    p_seq=>1,
    p_instance=>1,
    p_table=>SUBSTR('"EDWSTG"."CHG_PERSON"',0,80),
    p_column=>SUBSTR('PERSON_UID',0,80),
    p_value=>SUBSTRB("D9_0_P6$1"(error_index),0,2000),
    p_step=>get_step_number,
    p_role=>'S'
    );
  RETURN;
    
  END "DEDUPLICATOR_0_IN2_ES$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_ER$1" registers error for one erroneous row
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_ER$1"(p_statement IN VARCHAR2, p_column IN VARCHAR2, p_col_value IN VARCHAR2, p_sqlcode IN NUMBER, p_sqlerrm IN VARCHAR2, p_auditd_id IN NUMBER, p_error_index IN NUMBER) IS
l_source_target_name VARCHAR2(80);
BEGIN
  IF p_auditd_id IS NULL THEN
    l_source_target_name := SUBSTR(get_source_name,0,80);
  ELSE
    l_source_target_name := get_target_name;
  END IF;

  IF p_error_index = 0 THEN  
  get_rowkey_error := 0;
ELSE  
  get_rowkey_error := get_rowkey + p_error_index - 1;
END IF;

  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    OWBSYS.WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rtd=>p_auditd_id,
      p_rowkey=>get_rowkey_error,
      p_table=>l_source_target_name,
      p_column=>p_column,
      p_dstval=>p_col_value,
      p_stm=>'TRACE 845: ' || p_statement,
      p_sqlerr=>p_sqlcode,
      p_sqlerrm=>p_sqlerrm,
      p_rowid=>NULL
    );
  END IF;

  IF ( get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    OWBSYS.WB_RT_MAPAUDIT.register_feedback(
      p_rta=>get_runtime_audit_id,
      p_step=>get_step_number,
      p_rowkey=>get_rowkey_error,
      p_status=>'ERROR',
      p_table=>l_source_target_name,
      p_role=>'T',
      p_action=>SUBSTR(p_statement,0,30)
    );
  END IF;

  IF ( get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE ) AND (get_rowkey_error > 0) THEN
    "DEDUPLICATOR_0_IN2_ES$1"(p_error_index);
  END IF;
END "DEDUPLICATOR_0_IN2_ER$1";



---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_SU$1" opens and initializes data source
-- for map "DEDUPLICATOR_0_IN2_t"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_SU$1" IS
BEGIN
  IF get_abort THEN
    RETURN;
  END IF;
  IF (NOT "DEDUPLICATOR_0_IN2_c$1"%ISOPEN) THEN
    OPEN "DEDUPLICATOR_0_IN2_c$1";
  END IF;
  get_read_success := TRUE;
END "DEDUPLICATOR_0_IN2_SU$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_RD$1" fetches a bulk of rows from
--   the data source for map "DEDUPLICATOR_0_IN2_t"
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_RD$1" IS
BEGIN
  IF NOT get_read_success THEN
    get_abort := TRUE;
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.error(
        p_rta=>get_runtime_audit_id,
        p_step=>0,
        p_rtd=>NULL,
        p_rowkey=>0,
        p_table=>NULL,
        p_column=>NULL,
        p_dstval=>NULL,
        p_stm=>NULL,
        p_sqlerr=>-20007,
        p_sqlerrm=>'CursorFetchMapTerminationRTV20007',
        p_rowid=>NULL
      );
    END IF;
                END IF;

  IF get_abort OR get_abort_procedure THEN
    RETURN;
  END IF;

  BEGIN
    "D9_0_P6$1".DELETE;

    FETCH
      "DEDUPLICATOR_0_IN2_c$1"
    BULK COLLECT INTO
      "D9_0_P6$1"
    LIMIT get_bulk_size;

    get_total_processed_rowcount := get_total_processed_rowcount + "D9_0_P6$1".COUNT;

    IF "DEDUPLICATOR_0_IN2_c$1"%NOTFOUND AND "D9_0_P6$1".COUNT = 0 THEN
      RETURN;
    END IF;
    -- register feedback for successful reads
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey := rowkey_counter;
      rowkey_counter := rowkey_counter + "D9_0_P6$1".COUNT;
    END IF;
    
    IF get_audit_level = AUDIT_COMPLETE THEN
      OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
        p_rta=>get_runtime_audit_id,
        p_step=>get_step_number,
        p_rowkey=>get_rowkey,
        p_status=>'NEW',
        p_table=>get_source_name,
        p_role=>'S',
        p_action=>'SELECT'
      );
    END IF;
    get_map_selected := get_map_selected + "D9_0_P6$1".COUNT;
  EXCEPTION
    WHEN OTHERS THEN
        last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
      get_read_success := FALSE;
      -- register error
      IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
        one_rowkey := rowkey_counter;
        rowkey_counter := rowkey_counter + 1;
        OWBSYS.WB_RT_MAPAUDIT.error(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rtd=>NULL,
          p_rowkey=>one_rowkey,
          p_table=>get_source_name,
          p_column=>'*',
          p_dstval=>NULL,
          p_stm=>'TRACE 846: SELECT',
          p_sqlerr=>SQLCODE,
          p_sqlerrm=>SQLERRM,
          p_rowid=>NULL
        );
      END IF;
      
      -- register feedback for the erroneous row
      IF get_audit_level = AUDIT_COMPLETE THEN
        OWBSYS.WB_RT_MAPAUDIT.register_feedback(
          p_rta=>get_runtime_audit_id,
          p_step=>get_step_number,
          p_rowkey=>one_rowkey,
          p_status=>'ERROR',
          p_table=>get_source_name,
          p_role=>'S',
          p_action=>'SELECT'
        );
      END IF;
      get_errors := get_errors + 1;
      IF get_errors > get_max_errors THEN get_abort := TRUE; END IF;
  END;
END "DEDUPLICATOR_0_IN2_RD$1";

---------------------------------------------------------------------------
-- Procedure "DEDUPLICATOR_0_IN2_DML$1" does DML for a bulk of rows starting from index si.
---------------------------------------------------------------------------
PROCEDURE "DEDUPLICATOR_0_IN2_DML$1"(si NUMBER, firstround BOOLEAN) IS
 "WDT_WAREHOUSE_ENTITY_1_ins0" NUMBER := "WDT_WAREHOUSE_ENTITY_1_ins";
"WDT_WAREHOUSE_ENTITY_1_upd0" NUMBER := "WDT_WAREHOUSE_ENTITY_1_upd";
BEGIN
 IF get_use_hc THEN
  IF firstround AND NOT get_row_status THEN
   RETURN;
  END IF;
  get_row_status := TRUE;
 END IF;
 IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
-- Update/Insert DML for "WDT_WAREHOUSE_ENTITY_1"
  normal_action := 'UPDATE';
  error_action  := 'UPDATE';
  get_target_name := '"WDT_WAREHOUSE_ENTITY_1"';
  get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
  "WDT_WAREHOUSE_ENTITY_1_si" := 1;
  update_bulk.DELETE;
  update_bulk_index := 1;
  IF "WDT_WAREHOUSE_ENTITY_1_i" > get_bulk_size 
 OR "DEDUPLICATOR_0_IN2_c$1"%NOTFOUND OR get_abort OR get_use_hc THEN
    LOOP
      get_rowid.DELETE;

      BEGIN
        FORALL i IN "WDT_WAREHOUSE_ENTITY_1_si".."WDT_WAREHOUSE_ENTITY_1_i" - 1 
          UPDATE
          /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY_1") */
            "WDT_WAREHOUSE_ENTITY"
          SET

						"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W7_28_S0$1"
(i)
  
          WHERE

						"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W7_1_B3$1"
(i)
  
          RETURNING ROWID BULK COLLECT INTO get_rowid;
          
        feedback_bulk_limit := "WDT_WAREHOUSE_ENTITY_1_i" - 1;
        get_rowkey_bulk.DELETE;
        rowkey_bulk_index := 1;
        FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..feedback_bulk_limit LOOP
          IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
            update_bulk(update_bulk_index) := rowkey_index;
            update_bulk_index := update_bulk_index + 1;
          ELSE
            IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
              get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
              rowkey_bulk_index := rowkey_bulk_index + 1;
            END IF;
          END IF;
        END LOOP;
        
        
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

        "WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd" + get_rowid.COUNT;
        "WDT_WAREHOUSE_ENTITY_1_si" := "WDT_WAREHOUSE_ENTITY_1_i";

      EXCEPTION
        WHEN OTHERS THEN
            last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
          IF SQL%NOTFOUND THEN
            last_successful_index := 0;
          ELSE
            FOR rowkey_index IN REVERSE "WDT_WAREHOUSE_ENTITY_1_si".."WDT_WAREHOUSE_ENTITY_1_i"- 1 LOOP
              IF NOT (SQL%BULK_ROWCOUNT(rowkey_index) = 0) THEN
                last_successful_index := rowkey_index;
                EXIT;
              END IF;
            END LOOP;
          END IF;
          feedback_bulk_limit := last_successful_index;
          get_rowkey_bulk.DELETE;
          rowkey_bulk_index := 1;
          FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..feedback_bulk_limit LOOP
            IF SQL%BULK_ROWCOUNT(rowkey_index) = 0 THEN
              update_bulk(update_bulk_index) := rowkey_index;
              update_bulk_index := update_bulk_index + 1;
            ELSE
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
                rowkey_bulk_index := rowkey_bulk_index + 1;
              END IF;
            END IF;
          END LOOP;
          
          
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;
          "WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd" + get_rowid.COUNT;
          IF last_successful_index = 0 THEN
            last_successful_index := "WDT_WAREHOUSE_ENTITY_1_si";
          ELSE
            last_successful_index := last_successful_index +1;
          END IF;
          LOOP
            BEGIN
              UPDATE
              /*+ APPEND PARALLEL("WDT_WAREHOUSE_ENTITY_1") */
                "WDT_WAREHOUSE_ENTITY"
              SET

								"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS" = "W7_28_S0$1"
(last_successful_index)

              WHERE

								"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM" = "W7_1_B3$1"
(last_successful_index)

              ;
            update_bulk(update_bulk_index) := last_successful_index;
            update_bulk_index := update_bulk_index + 1;
            last_successful_index := last_successful_index + 1;
          EXCEPTION
            WHEN OTHERS THEN
                last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
              IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                error_rowkey := "WDT_WAREHOUSE_ENTITY_1_srk"(last_successful_index);
                OWBSYS.WB_RT_MAPAUDIT.error(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rtd=>get_audit_detail_id,
                  p_rowkey=>error_rowkey,
                  p_table=>get_target_name,
                  p_column=>'*',
                  p_dstval=>NULL,
                  p_stm=>'TRACE : ' || error_action,
                  p_sqlerr=>SQLCODE,
                  p_sqlerrm=>SQLERRM,
                  p_rowid=>NULL
                );
                get_column_seq := 0;
                

                
                Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W7_28_S0$1"(last_successful_index),0,2000));
                
              END IF;
              IF get_audit_level = AUDIT_COMPLETE THEN
                OWBSYS.WB_RT_MAPAUDIT.register_feedback(
                  p_rta=>get_runtime_audit_id,
                  p_step=>get_step_number,
                  p_rowkey=>error_rowkey,
                  p_status=>'ERROR',
                  p_table=>get_target_name,
                  p_role=>'T',
                  p_action=>error_action
                );
              END IF;
              "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
              
              IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
                get_abort:= TRUE;
              END IF;
              "WDT_WAREHOUSE_ENTITY_1_si" := last_successful_index + 1;
              EXIT;
          END;
        END LOOP;
    END;
    IF "WDT_WAREHOUSE_ENTITY_1_si" >= "WDT_WAREHOUSE_ENTITY_1_i" OR get_abort THEN
      EXIT;
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_1_i" := 1;

  --process leftover inserts
  insert_bulk_index := 0;
  FOR j IN 1..update_bulk.COUNT LOOP
    insert_bulk_index := insert_bulk_index + 1;
		"W7_1_B3$1"(insert_bulk_index) := "W7_1_B3$1"(update_bulk(j));
		"W7_28_S0$1"(insert_bulk_index) := "W7_28_S0$1"(update_bulk(j));
    IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
      "WDT_WAREHOUSE_ENTITY_1_srk"(insert_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(update_bulk(j));
    END IF;
  END LOOP;

  "WDT_WAREHOUSE_ENTITY_1_si" := 1;
  normal_action := 'INSERT';
  error_action  := 'INSERT';
  LOOP
    EXIT WHEN get_abort OR "WDT_WAREHOUSE_ENTITY_1_si" > insert_bulk_index;
    get_rowid.DELETE;

    BEGIN
      FORALL i IN "WDT_WAREHOUSE_ENTITY_1_si"..insert_bulk_index
        INSERT INTO
          "WDT_WAREHOUSE_ENTITY"
          ("WDT_WAREHOUSE_ENTITY"."BANNER_PIDM",
          "WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS")
        VALUES
          ("W7_1_B3$1"(i),
          "W7_28_S0$1"(i))
        RETURNING ROWID BULK COLLECT INTO get_rowid;
      error_index := "WDT_WAREHOUSE_ENTITY_1_si" + get_rowid.COUNT;
    EXCEPTION
      WHEN OTHERS THEN
          last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
        error_index := "WDT_WAREHOUSE_ENTITY_1_si" + get_rowid.COUNT;
        IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
          error_rowkey := "WDT_WAREHOUSE_ENTITY_1_srk"(error_index);
          OWBSYS.WB_RT_MAPAUDIT.error(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rtd=>get_audit_detail_id,
            p_rowkey=>error_rowkey,
            p_table=>get_target_name,
            p_column=>'*',
            p_dstval=>NULL,
            p_stm=>'TRACE 847: ' || error_action,
            p_sqlerr=>SQLCODE,
            p_sqlerrm=>SQLERRM,
            p_rowid=>NULL
          );
          get_column_seq := 0;
          

          
          
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."BANNER_PIDM"',0,80),SUBSTRB("W7_1_B3$1"(error_index),0,2000));
          Main_ES(get_step_number,error_rowkey,get_target_name,SUBSTRB('"WDT_WAREHOUSE_ENTITY"."SYSTEM_LOAD_PROCESS"',0,80),SUBSTRB("W7_28_S0$1"(error_index),0,2000));
          
        END IF;
        IF get_audit_level = AUDIT_COMPLETE THEN
          OWBSYS.WB_RT_MAPAUDIT.register_feedback(
            p_rta=>get_runtime_audit_id,
            p_step=>get_step_number,
            p_rowkey=>error_rowkey,
            p_status=>'ERROR',
            p_table=>get_target_name,
            p_role=>'T',
            p_action=>error_action
          );
        END IF;
        "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
        
        IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
          get_abort:= TRUE;
        END IF;
    END;

    -- feedback for a bulk of rows
    IF get_audit_level = AUDIT_COMPLETE THEN
      get_rowkey_bulk.DELETE;
      rowkey_bulk_index := 1;
      FOR rowkey_index IN "WDT_WAREHOUSE_ENTITY_1_si"..error_index - 1 LOOP
        get_rowkey_bulk(rowkey_bulk_index) := "WDT_WAREHOUSE_ENTITY_1_srk"(rowkey_index);
        rowkey_bulk_index := rowkey_bulk_index + 1;
      END LOOP;
    END IF;
    
IF get_audit_level = AUDIT_COMPLETE THEN
  OWBSYS.WB_RT_MAPAUDIT.register_feedback_bulk(
    p_rta=>get_runtime_audit_id,
    p_step=>get_step_number,
    p_rowkey=>get_rowkey_bulk,
    p_status=>'NEW',
    p_table=>get_target_name,
    p_role=>'T',
    p_action=>normal_action,
    p_rowid=>get_rowid
  );
END IF;

    "WDT_WAREHOUSE_ENTITY_1_ins" := "WDT_WAREHOUSE_ENTITY_1_ins" + get_rowid.COUNT;
    "WDT_WAREHOUSE_ENTITY_1_si" := error_index + 1;
  END LOOP;
  END IF;
END IF;


 IF get_use_hc AND NOT firstround THEN
  COMMIT; -- commit no.27
 END IF;
 IF get_use_hc AND NOT get_row_status THEN
 "WDT_WAREHOUSE_ENTITY_1_ins" := "WDT_WAREHOUSE_ENTITY_1_ins0"; 
"WDT_WAREHOUSE_ENTITY_1_upd" := "WDT_WAREHOUSE_ENTITY_1_upd0";
END IF;

END "DEDUPLICATOR_0_IN2_DML$1";

---------------------------------------------------------------------------
-- "DEDUPLICATOR_0_IN2_t" main
---------------------------------------------------------------------------

BEGIN
  IF get_abort OR get_abort_procedure THEN
    
    RETURN;
  END IF;

  
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.7
  sql_stmt := 'ALTER SESSION DISABLE PARALLEL DML';
  EXECUTE IMMEDIATE sql_stmt;
END IF;

  IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
    -- For normal cursor query loop operation, skip map procedure initialization if 
    -- cursor is already open - procedure initialization should only be done the 
    -- first time the procedure is called (since mapping debugger
    -- executes the procedure multiple times and leaves the cursor open). 
    -- For table function (parallel row mode) operation, the cursor will already be
    -- open when the procedure is called, so execute the initialization.
    IF get_table_function OR (NOT "DEDUPLICATOR_0_IN2_c$1"%ISOPEN) THEN
      IF NOT (get_audit_level = AUDIT_NONE) THEN
        IF NOT "WDT_WAREHOUSE_ENTITY_1_St" THEN
          "WDT_WAREHOUSE_ENTITY_1_id" :=
            OWBSYS.WB_RT_MAPAUDIT.auditd_begin(  -- Template AuditDetailBegin
              p_rta=>get_runtime_audit_id,
              p_step=>get_step_number,
              p_name=>get_map_name,
              p_source=>get_source_name,
              p_source_uoid=>get_source_uoid,
              p_target=>'"WDT_WAREHOUSE_ENTITY_1"',
              p_target_uoid=>'011141E13C27C226E050F00AA3444997',
              p_stm=>'TRACE 849',
            	p_info=>NULL,
              p_exec_mode=>l_exec_mode
            );
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
              
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'DB9733E5DE63CD7DE0401895B8250EA8', -- Operator WDT_WAREHOUSE_ENTITY_1
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'D10E7A04AC26C30BE0401895B8256F04', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'D10E77AFDB2F188FE0401895B8256E77' -- EDWMGR_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'DB9733E5DE31CD7DE0401895B8250EA8', -- Operator CHG_PERSON
              p_parent_object_name=>'CHG_PERSON',
              p_parent_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
              p_parent_object_type=>'Table',
              p_object_name=>'CHG_PERSON',
              p_object_uoid=>'DB9733E5DE10CD7DE0401895B8250EA8', -- Table CHG_PERSON
              p_object_type=>'Table',
              p_location_uoid=>'D10E77AFDB4A188FE0401895B8256E77' -- EDWSTG_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13A54C226E050F00AA3444997', -- Operator CHG_PERSON
              p_parent_object_name=>'CHG_PERSON',
              p_parent_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
              p_parent_object_type=>'Table',
              p_object_name=>'CHG_PERSON',
              p_object_uoid=>'011141E1184BC226E050F00AA3444997', -- Table CHG_PERSON
              p_object_type=>'Table',
              p_location_uoid=>'F470739246A8BD3EE040F00AA34419FD' -- Location EDWSTG_LOCATION
            );  
get_audit_detail_type_id := OWBSYS.WB_RT_MAPAUDIT.register_audit_detail_type(
              p_rtd=>get_audit_detail_id,
              p_parent_operator_uoid=>'011141E13C27C226E050F00AA3444997', -- Operator WDT_WAREHOUSE_ENTITY_1
              p_parent_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_parent_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_parent_object_type=>'Table',
              p_object_name=>'WDT_WAREHOUSE_ENTITY',
              p_object_uoid=>'011141E116F9C226E050F00AA3444997', -- Table WDT_WAREHOUSE_ENTITY
              p_object_type=>'Table',
              p_location_uoid=>'F4707392468DBD3EE040F00AA34419FD' -- Location EDWMGR_LOCATION
            );
        END IF;
        IF NOT get_no_commit THEN
          COMMIT; -- commit no.10
        END IF;
      END IF;

      

      -- Initialize buffer variables
      get_buffer_done.DELETE;
      get_buffer_done_index := 1;

    END IF; -- End if cursor not open

    -- Initialize internal loop index variables
    "DEDUPLICATOR_0_IN2_si$1" := 0;
    "WDT_WAREHOUSE_ENTITY_1_i" := 1;
    get_rows_processed := FALSE;

    IF NOT get_abort AND NOT get_abort_procedure THEN
      "DEDUPLICATOR_0_IN2_SU$1";

      LOOP
        IF "DEDUPLICATOR_0_IN2_si$1" = 0 THEN
          "DEDUPLICATOR_0_IN2_RD$1";   -- Fetch data from source
          IF NOT get_read_success THEN
            bulk_count := "D9_0_P6$1".COUNT - 1;
          ELSE
            bulk_count := "D9_0_P6$1".COUNT;
          END IF;
                                        IF bulk_commit THEN
                                                bulk_commit_count := 0;
                                                bulk_commit := FALSE;
                                        END IF;
                                        bulk_commit_count := bulk_commit_count + bulk_count;

 
          IF get_use_hc THEN
            dml_bsize := 0;
            "WDT_WAREHOUSE_ENTITY_1_ir".DELETE;
"WDT_WAREHOUSE_ENTITY_1_i" := 1;
          END IF;
        END IF;

        -- Processing:
        "DEDUPLICATOR_0_IN2_i$1" := "DEDUPLICATOR_0_IN2_si$1";
        BEGIN
          
          LOOP
            EXIT WHEN "WDT_WAREHOUSE_ENTITY_1_i" > get_bulk_size OR get_abort OR get_abort_procedure;

            "DEDUPLICATOR_0_IN2_i$1" := "DEDUPLICATOR_0_IN2_i$1" + 1;
            "DEDUPLICATOR_0_IN2_si$1" := "DEDUPLICATOR_0_IN2_i$1";
            IF get_use_hc THEN
              get_row_status := TRUE;
                "WDT_WAREHOUSE_ENTITY_1_new" := FALSE;
            END IF;

            get_buffer_done(get_buffer_done_index) := 
              ("DEDUPLICATOR_0_IN2_c$1"%NOTFOUND AND
               "DEDUPLICATOR_0_IN2_i$1" > bulk_count);

            IF (NOT get_buffer_done(get_buffer_done_index)) AND
              "DEDUPLICATOR_0_IN2_i$1" > bulk_count THEN
            
              "DEDUPLICATOR_0_IN2_si$1" := 0;
              EXIT;
            END IF;


            
get_target_name := '"WDT_WAREHOUSE_ENTITY_1"';
            get_audit_detail_id := "WDT_WAREHOUSE_ENTITY_1_id";
            IF NOT "WDT_WAREHOUSE_ENTITY_1_St" AND NOT get_buffer_done(get_buffer_done_index) THEN
              BEGIN
                get_rows_processed := true; -- Set to indicate that some row data was processed (for debugger)
            		error_stmt := SUBSTRB('"W7_1_B3$1"("WDT_WAREHOUSE_ENTITY_1_i") := 
            
            "D9_0_P6$1"("DEDUPLICATOR_0_IN2_i$1");',0,2000);
            error_column := SUBSTRB('"W7_1_B3$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("D9_0_P6$1"("DEDUPLICATOR_0_IN2_i$1"),0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W7_1_B3$1"("WDT_WAREHOUSE_ENTITY_1_i") :=
            
            "D9_0_P6$1"("DEDUPLICATOR_0_IN2_i$1");
            
            ELSIF get_row_status THEN
              "SV_W7_1_B3$1" :=
            
            "D9_0_P6$1"("DEDUPLICATOR_0_IN2_i$1");
            
            ELSE
              NULL;
            END IF;
            
            		error_stmt := SUBSTRB('"W7_28_S0$1"("WDT_WAREHOUSE_ENTITY_1_i") := 
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;',0,2000);
            error_column := SUBSTRB('"W7_28_S0$1"',0,80);
            
            BEGIN
              error_value := SUBSTRB("EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */,0,2000);
            EXCEPTION 
              WHEN OTHERS THEN
                error_value := '*';
            END;
            
            IF NOT get_use_hc THEN
              "W7_28_S0$1"("WDT_WAREHOUSE_ENTITY_1_i") :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSIF get_row_status THEN
              "SV_W7_28_S0$1" :=
            
            "EDW_DIM_WAREHOUSE_ENTITY"."W1_0_W1"/* ATTRIBUTE WAREHOUSE_ENTITY_SOURCE.OUTGRP1.WAREHOUSE_ENTITY_SOURCE */;
            
            ELSE
              NULL;
            END IF;
            
            
            
                IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
                  IF NOT get_use_hc THEN
                    "WDT_WAREHOUSE_ENTITY_1_srk"("WDT_WAREHOUSE_ENTITY_1_i") := get_rowkey + "DEDUPLICATOR_0_IN2_i$1" - 1;
                  ELSIF get_row_status THEN
                    "SV_WDT_WAREHOUSE_ENTITY_1_srk" := get_rowkey + "DEDUPLICATOR_0_IN2_i$1" - 1;
                  ELSE
                    NULL;
                  END IF;
                  END IF;
                  IF get_use_hc THEN
                  "WDT_WAREHOUSE_ENTITY_1_new" := TRUE;
                ELSE
                  "WDT_WAREHOUSE_ENTITY_1_i" := "WDT_WAREHOUSE_ENTITY_1_i" + 1;
                END IF;
              EXCEPTION
                WHEN OTHERS THEN
                    last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
             
                  "DEDUPLICATOR_0_IN2_ER$1"('TRACE 850: ' || error_stmt, error_column, error_value, SQLCODE, SQLERRM, get_audit_detail_id, "DEDUPLICATOR_0_IN2_i$1");
                  
                  "WDT_WAREHOUSE_ENTITY_1_err" := "WDT_WAREHOUSE_ENTITY_1_err" + 1;
                  
                  IF get_errors + "WDT_WAREHOUSE_ENTITY_1_err" > get_max_errors THEN
                    get_abort:= TRUE;
                  END IF;
                  get_row_status := FALSE; 
              END;
            END IF;
            
            
            
              
            
             EXIT WHEN get_buffer_done(get_buffer_done_index);

            IF get_use_hc AND get_row_status AND ("WDT_WAREHOUSE_ENTITY_1_new") THEN
              dml_bsize := dml_bsize + 1;
            	IF "WDT_WAREHOUSE_ENTITY_1_new" 
            AND (NOT "WDT_WAREHOUSE_ENTITY_1_nul") THEN
              "WDT_WAREHOUSE_ENTITY_1_ir"(dml_bsize) := "WDT_WAREHOUSE_ENTITY_1_i";
            	"W7_1_B3$1"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_W7_1_B3$1";
            	"W7_28_S0$1"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_W7_28_S0$1";
              "WDT_WAREHOUSE_ENTITY_1_srk"("WDT_WAREHOUSE_ENTITY_1_i") := "SV_WDT_WAREHOUSE_ENTITY_1_srk";
              "WDT_WAREHOUSE_ENTITY_1_i" := "WDT_WAREHOUSE_ENTITY_1_i" + 1;
            ELSE
              "WDT_WAREHOUSE_ENTITY_1_ir"(dml_bsize) := 0;
            END IF;
            END IF;
            
          END LOOP;

          "DEDUPLICATOR_0_IN2_DML$1"(1, TRUE);
          IF get_use_hc THEN
            IF NOT get_row_status THEN
              FOR start_index IN 1..dml_bsize LOOP
                "DEDUPLICATOR_0_IN2_DML$1"(start_index, FALSE);
              END LOOP;
            ELSE
              COMMIT;
            END IF;
          END IF;
          
        EXCEPTION
          WHEN OTHERS THEN
              last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
            "DEDUPLICATOR_0_IN2_ER$1"('TRACE 848: ' || error_stmt, '*', NULL, SQLCODE, SQLERRM, NULL, "DEDUPLICATOR_0_IN2_i$1");
            get_errors := get_errors + 1;
            IF get_errors > get_max_errors THEN  
  get_abort := TRUE;
END IF;
            
        END;
        
  IF NOT "WDT_WAREHOUSE_ENTITY_1_St" AND bulk_commit_count > get_commit_frequency THEN
            IF NOT (get_audit_level = AUDIT_NONE) THEN
              OWBSYS.WB_RT_MAPAUDIT.auditd_progress(
                p_rtd=>"WDT_WAREHOUSE_ENTITY_1_id",
                p_sel=>get_map_selected,
                p_ins=>"WDT_WAREHOUSE_ENTITY_1_ins",
                p_upd=>"WDT_WAREHOUSE_ENTITY_1_upd",
                p_del=>"WDT_WAREHOUSE_ENTITY_1_del",
                p_err=>"WDT_WAREHOUSE_ENTITY_1_err",
                p_dis=>NULL
              );
            END IF;
            IF NOT get_no_commit THEN
              COMMIT; -- commit no.25
              bulk_commit := TRUE;
            END IF;
          END IF;


        cursor_exhausted := "DEDUPLICATOR_0_IN2_c$1"%NOTFOUND;
        exit_loop_normal := get_abort OR get_abort_procedure OR (cursor_exhausted AND "DEDUPLICATOR_0_IN2_i$1" > bulk_count);
        exit_loop_early := get_rows_processed AND get_bulk_loop_count IS NOT NULL AND "DEDUPLICATOR_0_IN2_i$1" >= get_bulk_loop_count;
        get_close_cursor := get_abort OR get_abort_procedure OR cursor_exhausted;
        EXIT WHEN exit_loop_normal OR exit_loop_early;

      END LOOP;
    END IF;
    IF NOT get_no_commit THEN
      COMMIT; -- commit no.11
    END IF;
    BEGIN
      IF get_close_cursor THEN
        CLOSE "DEDUPLICATOR_0_IN2_c$1";
      END IF;
    EXCEPTION WHEN OTHERS THEN
      NULL;
      END;
    -- Do post processing only after procedure has been called for the last time and the cursor is closing
    IF get_close_cursor THEN
      
IF NOT get_abort AND NOT get_abort_procedure AND NOT get_no_commit THEN
        -- resolve actual owner and name
        OWBSYS.WB_RT_MAPAUDIT_UTIL.resolve_name(p_original_owner=>
      USER, p_original_name=>'WDT_WAREHOUSE_ENTITY', p_actual_owner=>actual_owner, p_actual_name=>actual_name);
      
        IF actual_name IS NOT NULL THEN
          SELECT NVL(num_rows, 0) INTO get_map_num_rows
          FROM all_tables
          WHERE table_name = actual_name
          AND owner = actual_owner;
          IF ("WDT_WAREHOUSE_ENTITY_1_ins" + "WDT_WAREHOUSE_ENTITY_1_upd" + "WDT_WAREHOUSE_ENTITY_1_del") >= get_map_num_rows THEN
            a_table_to_analyze.ownname := actual_owner;
            a_table_to_analyze.tabname := actual_name;
            a_table_to_analyze.estimate_percent := 5;
            a_table_to_analyze.granularity := 'ALL';
            a_table_to_analyze.cascade := TRUE;
            a_table_to_analyze.degree  := NULL;
            "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze(
          "EDW_DIM_WAREHOUSE_ENTITY".tables_to_analyze.COUNT + 1) := a_table_to_analyze;
          END IF;
        END IF;
      END IF;
      
      NULL;
    END IF; -- If get_close_cursor
  END IF;
  
  IF NOT "WDT_WAREHOUSE_ENTITY_1_St"
    AND NOT (get_audit_level = AUDIT_NONE) THEN
      OWBSYS.WB_RT_MAPAUDIT.auditd_end(
        p_rtd=>"WDT_WAREHOUSE_ENTITY_1_id",
        p_sel=>get_map_selected,  -- AuditDetailEnd1
        p_ins=>"WDT_WAREHOUSE_ENTITY_1_ins",
        p_upd=>"WDT_WAREHOUSE_ENTITY_1_upd",
        p_del=>"WDT_WAREHOUSE_ENTITY_1_del",
        p_err=>"WDT_WAREHOUSE_ENTITY_1_err",
        p_dis=>NULL
      );
    END IF;
  	get_inserted := get_inserted + "WDT_WAREHOUSE_ENTITY_1_ins";
    get_updated  := get_updated  + "WDT_WAREHOUSE_ENTITY_1_upd";
    get_deleted  := get_deleted  + "WDT_WAREHOUSE_ENTITY_1_del";
    get_errors   := get_errors   + "WDT_WAREHOUSE_ENTITY_1_err";

  get_selected := get_selected + get_map_selected;
  IF NOT get_no_commit THEN
  COMMIT;  -- commit no.21
END IF;

END "DEDUPLICATOR_0_IN2_t";







PROCEDURE logTextToUser(p_text IN VARCHAR2) IS
  log_clob CLOB;
  log_line VARCHAR2(32767);
BEGIN
  DBMS_LOB.CREATETEMPORARY(log_clob,TRUE);
  dbms_lob.open(log_clob, DBMS_LOB.LOB_READWRITE);
  log_line := p_text || '
';
  dbms_lob.writeappend(log_clob, LENGTH(log_line), log_line);
  dbms_lob.close(log_clob);
  WB_RT_MAPAUDIT.log_file(p_rta=>get_runtime_audit_id, p_text=>log_clob);
EXCEPTION WHEN OTHERS THEN
  dbms_output.put_line(SQLERRM);
END logTextToUser;

PROCEDURE Initialize("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
p_env IN OWBSYS.WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  get_selected := 0;
  get_inserted := 0;
  get_updated  := 0;
  get_deleted  := 0;
  get_merged   := 0;
  get_errors   := 0;
  get_logical_errors := 0;
  get_abort    := FALSE;
  get_abort_procedure  := FALSE;

  FOR i IN 1..p_env.COUNT LOOP
    IF p_env(i).param_value IS NOT NULL THEN
      IF p_env(i).param_name = 'MAX_NO_OF_ERRORS' THEN
        get_max_errors := p_env(i).param_value;

      ELSIF p_env(i).param_name = 'COMMIT_FREQUENCY' THEN
        get_commit_frequency := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OPERATING_MODE' THEN
        get_operating_mode := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'BULK_SIZE' THEN
        get_bulk_size := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_LEVEL' THEN
        get_audit_level := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'AUDIT_ID' THEN
        get_audit_id := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'PURGE_GROUP' THEN
        get_purge_group := p_env(i).param_value;
      ELSIF p_env(i).param_name = 'OBJECT_ID' THEN
        OWB$MAP_OBJECT_ID := p_env(i).param_value;
      END IF;
    END IF;
  END LOOP;


-- Mapping input parameter global variable assignments

"EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN" := "EDW_DIM_WAREHOUSE_ENTITY".Initialize."PROCESS_IND_IN";
"EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_DATE_IN" := "EDW_DIM_WAREHOUSE_ENTITY".Initialize."PROCESS_DATE_IN";


        IF NOT (get_job_audit) THEN
            get_audit_level := AUDIT_NONE;
        END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
    get_runtime_audit_id := OWBSYS.WB_RT_MAPAUDIT.audit_begin(  -- Template AuditBegin
      p_auditid=>get_audit_id,
      p_lob_uoid=>get_lob_uoid,
      p_lob_name=>get_model_name,
      p_purge_group=>get_purge_group,
      p_parent=>NULL,
      p_source=>'"GTVVPDI","SATURN"."SPRIDEN","EDWSTG"."CHG_PERSON"',
      p_source_uoid=>'*',
      p_target=>'"WDT_WAREHOUSE_ENTITY","WDT_WAREHOUSE_ENTITY_1"',
      p_target_uoid=>'011141E13BEEC226E050F00AA3444997,011141E13C27C226E050F00AA3444997',      p_info=>NULL,
      
            p_type=>'PLSQLMap',
      
      p_date=>get_cycle_date
    );
  END IF;






  IF NOT get_no_commit THEN
    COMMIT; -- commit no.1
  END IF;
END Initialize;

PROCEDURE Analyze_Targets IS
BEGIN
  FOR i IN 1..tables_to_analyze.COUNT LOOP
    OWBSYS.WB_RT_MAPAUDIT_UTIL_INVOKER.gather_table_stats(
      p_ownname          => tables_to_analyze(i).ownname,
      p_tabname          => tables_to_analyze(i).tabname,
      p_estimate_percent => tables_to_analyze(i).estimate_percent,
      p_granularity      => tables_to_analyze(i).granularity,
      p_cascade          => tables_to_analyze(i).cascade,
      p_degree           => tables_to_analyze(i).degree);
  END LOOP;
END Analyze_Targets;


PROCEDURE Finalize("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
p_env IN OWBSYS.WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  IS
BEGIN
  IF NOT get_no_commit THEN
    COMMIT; -- commit no.13
  END IF;
  IF (NOT get_abort) AND (get_errors = 0) THEN
	BEGIN
  -- Expression statement
      error_stmt := SUBSTRB('
  
      
      PURGE_EDW_STAGE_TABLES(("EDW_DIM_WAREHOUSE_ENTITY"."T3_0_C9"/* ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE */),("EDW_DIM_WAREHOUSE_ENTITY"."T3_1_S0"/* ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE */),("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */))/* OPERATOR PURGE_EDW_STAGE_TABLES */;
  
  ',0,2000);
  
      
      PURGE_EDW_STAGE_TABLES(("EDW_DIM_WAREHOUSE_ENTITY"."T3_0_C9"/* ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE */),("EDW_DIM_WAREHOUSE_ENTITY"."T3_1_S0"/* ATTRIBUTE TABLES.OUTGRP1.CHG_TABLE */),("EDW_DIM_WAREHOUSE_ENTITY"."PROCESS_IND_IN"/* ATTRIBUTE INPUT_PARAMETER.OUTGRP1.PROCESS_IND_IN */))/* OPERATOR PURGE_EDW_STAGE_TABLES */;
  
    -- End expression statement
  
  
    
EXCEPTION WHEN OTHERS THEN
  last_error_number  := SQLCODE;
  last_error_message := SQLERRM;
  IF get_audit_level = AUDIT_ERROR_DETAILS OR get_audit_level = AUDIT_COMPLETE THEN
    OWBSYS.WB_RT_MAPAUDIT.error(
      p_rta=>get_runtime_audit_id,
      p_step=>0,
      p_rtd=>NULL,
      p_rowkey=>0,
      p_table=>NULL,
      p_column=>NULL,
      p_dstval=>NULL,
      p_stm=>'POST_MAP_TRIGGER',
      p_sqlerr=>SQLCODE,
      p_sqlerrm=>SQLERRM,
      p_rowid=>NULL
    );
  END IF;
  get_errors := get_errors + 1;
  get_abort  := TRUE;
  get_trigger_success := FALSE;
END;
  END IF;





  IF get_abort THEN
    get_status := 1;
  ELSIF get_errors > 0 THEN
    get_status := 2;
  ELSE
    get_status := 0;
  END IF;
  get_processed := get_inserted + get_deleted + get_updated + get_merged; 
  IF (get_errors = 0) THEN
    get_error_ratio := 0;
  ELSE
    get_error_ratio := (get_errors /(get_errors + get_processed)) * 100;
  END IF;

  IF NOT (get_audit_level = AUDIT_NONE) THEN
  IF get_status = 0 THEN
    OWBSYS.WB_RT_MAPAUDIT.audit_end(
      p_rta=>get_runtime_audit_id,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  ELSE
    OWBSYS.WB_RT_MAPAUDIT.audit_fail(
      p_rta=>get_runtime_audit_id,
      p_status=>get_status,
      p_sel=>get_selected,
      p_ins=>get_inserted,
      p_upd=>get_updated,
      p_del=>get_deleted,
      p_err=>get_errors,
      p_dis=>NULL,
      p_logical_err=>get_logical_errors,
      p_mer=>get_merged
    );
  END IF;
END IF;


  Analyze_Targets;

        
END Finalize;



FUNCTION Main("PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
p_env IN OWBSYS.WB_RT_MAPAUDIT.WB_RT_NAME_VALUES)  RETURN NUMBER IS
get_batch_status           BOOLEAN := TRUE;
x_schema                   VARCHAR2(30);
BEGIN

  IF OWBSYS.WB_RT_MAPAUDIT_UTIL.supportsDesignClient(p_designVersion=>'11.2.0.2.0', p_minRuntimeVersion=>'11.2.0.2.0') < 1 THEN
    raise_application_error(-20103, 'Incompatible runtime and design client versions.');
  END IF;
        
        SELECT ao.owner INTO x_schema
        FROM   user_objects uo, all_objects ao
        WHERE  uo.object_type = 'PACKAGE'
        AND    uo.object_name = 'EDW_DIM_WAREHOUSE_ENTITY'
        AND    uo.object_id = ao.object_id;
 
        OWBSYS.wb_rt_mapaudit_util.set_schema_workspace(x_schema);
    
  Initialize("PROCESS_IND_IN", "PROCESS_DATE_IN", 
  p_env);
   
  
  
  
  
  
    
  NULL;
  
  
   -- Initialize all batch status variables
   "WDT_WAREHOUSE_ENTITY_St" := FALSE;
  "WDT_WAREHOUSE_ENTITY_1_St" := FALSE;
  
   --  Processing for different operating modes
   IF get_operating_mode = MODE_SET THEN
    IF get_use_hc AND NOT get_no_commit THEN
     IF get_enable_parallel_dml THEN
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';
     ELSE
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
     END IF;
    END IF;
    
    IF NOT get_use_hc OR get_batch_status THEN
        "WDT_WAREHOUSE_ENTITY_St" := "WDT_WAREHOUSE_ENTITY_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
        get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_St";
      END IF;  
    IF NOT get_use_hc OR get_batch_status THEN
        "WDT_WAREHOUSE_ENTITY_1_St" := "WDT_WAREHOUSE_ENTITY_1_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
        get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_1_St";
      END IF;
  
    IF get_use_hc THEN
     IF NOT get_batch_status THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
     END IF;
    END IF;
  
   END IF;
   IF get_operating_mode = MODE_ROW THEN
   "DEDUPLICATOR_IN2_p"("PROCESS_IND_IN", "PROCESS_DATE_IN"); "DEDUPLICATOR_0_IN2_p"("PROCESS_IND_IN", "PROCESS_DATE_IN");
   END IF;
   IF get_operating_mode = MODE_SET_FAILOVER_ROW THEN
    
    IF get_batch_status THEN
        IF NOT get_use_hc OR get_batch_status THEN
          "WDT_WAREHOUSE_ENTITY_St" := "WDT_WAREHOUSE_ENTITY_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
          get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_St";
        END IF;
      END IF;  
    IF get_batch_status THEN
        IF NOT get_use_hc OR get_batch_status THEN
          "WDT_WAREHOUSE_ENTITY_1_St" := "WDT_WAREHOUSE_ENTITY_1_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
          get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_1_St";
        END IF;
      END IF;
    IF get_use_hc THEN
     IF NOT get_batch_status AND get_use_hc THEN
      get_inserted := 0;
      get_updated  := 0;
      get_deleted  := 0;
      get_merged   := 0;
      get_logical_errors := 0;
  "WDT_WAREHOUSE_ENTITY_St" := FALSE;
  "WDT_WAREHOUSE_ENTITY_1_St" := FALSE;
  
     END IF;
    END IF;
  
  "DEDUPLICATOR_IN2_p"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  "DEDUPLICATOR_0_IN2_p"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  
   END IF;
   IF get_operating_mode = MODE_ROW_TARGET THEN
  "DEDUPLICATOR_IN2_t"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  "DEDUPLICATOR_0_IN2_t"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  
   END IF;
   IF get_operating_mode = MODE_SET_FAILOVER_ROW_TARGET THEN
    
    IF get_batch_status THEN
        IF NOT get_use_hc OR get_batch_status THEN
          "WDT_WAREHOUSE_ENTITY_St" := "WDT_WAREHOUSE_ENTITY_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
          get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_St";
        END IF;
      END IF;  
    IF get_batch_status THEN
        IF NOT get_use_hc OR get_batch_status THEN
          "WDT_WAREHOUSE_ENTITY_1_St" := "WDT_WAREHOUSE_ENTITY_1_Bat"("PROCESS_IND_IN", "PROCESS_DATE_IN");
          get_batch_status := get_batch_status AND "WDT_WAREHOUSE_ENTITY_1_St";
        END IF;
      END IF;
    IF NOT get_batch_status AND get_use_hc THEN
     get_inserted := 0;
     get_updated  := 0;
     get_deleted  := 0;
     get_merged   := 0;
     get_logical_errors := 0;
  "WDT_WAREHOUSE_ENTITY_St" := FALSE;
  "WDT_WAREHOUSE_ENTITY_1_St" := FALSE;
  
    END IF;
  "DEDUPLICATOR_IN2_t"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  "DEDUPLICATOR_0_IN2_t"("PROCESS_IND_IN", "PROCESS_DATE_IN");
  
   END IF;
  
  
   Finalize("PROCESS_IND_IN", "PROCESS_DATE_IN", 
  p_env);
   
   RETURN get_status;
  END;

FUNCTION encode_operating_mode(p_operating_mode IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_operating_mode IS NULL THEN
    RETURN get_operating_mode;
  END IF;
  IF p_operating_mode = 'SET_BASED' THEN
    RETURN MODE_SET;
  ELSIF p_operating_mode = 'ROW_BASED' THEN
    RETURN MODE_ROW;
  ELSIF p_operating_mode = 'ROW_BASED_TARGET_ONLY' THEN
    RETURN MODE_ROW_TARGET;
  ELSIF p_operating_mode = 'SET_BASED_FAIL_OVER_TO_ROW_BASED' THEN
    RETURN MODE_SET_FAILOVER_ROW;
  ELSE
    RETURN MODE_SET_FAILOVER_ROW_TARGET;
  END IF;
END encode_operating_mode;

FUNCTION encode_audit_level(p_audit_level IN VARCHAR2) RETURN NUMBER IS
BEGIN
  IF p_audit_level IS NULL THEN
    RETURN get_audit_level;
  END IF;
  IF p_audit_level = 'NONE' THEN
    RETURN AUDIT_NONE;
  ELSIF p_audit_level = 'STATISTICS' THEN
    RETURN AUDIT_STATISTICS;
  ELSIF p_audit_level = 'ERROR_DETAILS' THEN
    RETURN AUDIT_ERROR_DETAILS;
  ELSE
    RETURN AUDIT_COMPLETE;
  END IF;
END encode_audit_level;

FUNCTION encode_job_audit(p_job_audit IN VARCHAR2) RETURN BOOLEAN IS
BEGIN
  IF upper(p_job_audit) = 'TRUE' THEN
     RETURN true;
  ELSIF upper(p_job_audit) = 'FALSE' THEN
     RETURN false;
  ELSE
     RETURN true;
  END IF;
END encode_job_audit;



PROCEDURE Main(p_status OUT VARCHAR2,               "PROCESS_IND_IN" IN VARCHAR2
 DEFAULT 'L',
"PROCESS_DATE_IN" IN VARCHAR2
 DEFAULT TO_CHAR(SYSDATE - 1, 'DD-MON-YYYY'), 
               p_max_no_of_errors IN VARCHAR2 DEFAULT NULL,
               p_commit_frequency IN VARCHAR2 DEFAULT NULL,
               p_operating_mode   IN VARCHAR2 DEFAULT NULL,
               p_bulk_size        IN VARCHAR2 DEFAULT NULL,
               p_audit_level      IN VARCHAR2 DEFAULT NULL,
               p_purge_group      IN VARCHAR2 DEFAULT NULL,
               p_job_audit        IN VARCHAR2 DEFAULT 'TRUE')
 IS
  x_schema      VARCHAR2(30);

  x_audit_id    NUMBER;
  x_object_id   NUMBER;

  x_env         OWBSYS.wb_rt_mapaudit.wb_rt_name_values;
  x_param       OWBSYS.wb_rt_mapaudit.wb_rt_name_value;

  x_result      NUMBER;
  x_return_code NUMBER;

BEGIN
  -- validate parameters

  IF NOT OWBSYS.wb_rt_mapaudit_util.validate_runtime_parameter('MAX_NO_OF_ERRORS',
                                                        p_max_no_of_errors) OR
     NOT OWBSYS.wb_rt_mapaudit_util.validate_runtime_parameter('COMMIT_FREQUENCY',
                                                        p_commit_frequency) OR
     NOT OWBSYS.wb_rt_mapaudit_util.validate_runtime_parameter('OPERATING_MODE',
                                                        p_operating_mode)   OR
     NOT OWBSYS.wb_rt_mapaudit_util.validate_runtime_parameter('BULK_SIZE',
                                                        p_bulk_size)        OR
     NOT OWBSYS.wb_rt_mapaudit_util.validate_runtime_parameter('AUDIT_LEVEL',
                                                        p_audit_level) THEN
    p_status := 'FAILURE';
    RETURN;
  END IF;

  -- perform pre-run setup

  SELECT ao.owner INTO x_schema
  FROM   user_objects uo, all_objects ao
  WHERE  uo.object_type = 'PACKAGE'
  AND    uo.object_name = 'EDW_DIM_WAREHOUSE_ENTITY'
  AND    uo.object_id = ao.object_id;
 
  get_job_audit := encode_job_audit(p_job_audit);

  IF get_job_audit THEN 
     OWBSYS.wb_rt_mapaudit_util.premap('EDW_DIM_WAREHOUSE_ENTITY', x_schema, x_audit_id, x_object_id);
  ELSE
    OWBSYS.wb_rt_mapaudit_util.set_schema_workspace(x_schema);
  END IF;

  -- prepare parameters for Main:

  x_param.param_name := 'AUDIT_ID';
  x_param.param_value := x_audit_id;
  x_env(1) := x_param;

  x_param.param_name := 'OBJECT_ID';
  x_param.param_value := x_object_id;
  x_env(2) := x_param;

  x_param.param_name := 'MAX_NO_OF_ERRORS';
  x_param.param_value := p_max_no_of_errors;
  x_env(3) := x_param;

  x_param.param_name := 'COMMIT_FREQUENCY';
  x_param.param_value := p_commit_frequency;
  x_env(4) := x_param;

  x_param.param_name := 'OPERATING_MODE';
  x_param.param_value := encode_operating_mode(p_operating_mode);
  x_env(5) := x_param;

  x_param.param_name := 'BULK_SIZE';
  x_param.param_value := p_bulk_size;
  x_env(6) := x_param;

  x_param.param_name := 'AUDIT_LEVEL';
  x_param.param_value := encode_audit_level(p_audit_level);
  x_env(7) := x_param;

  x_param.param_name := 'PURGE_GROUP';
  x_param.param_value := p_purge_group;
  x_env(8) := x_param;


  IF get_job_audit AND x_audit_id IS NOT NULL THEN
  -- register "system" parameters:
  FOR i IN 3..8 LOOP
    IF x_env(i).param_value IS NOT NULL THEN
      OWBSYS.wb_rt_mapaudit_util.register_sys_param(x_audit_id,
                                             x_env(i).param_name,
                                             x_env(i).param_value);
    END IF;
  END LOOP;
  END IF;

  -- register custom input parameters:
  -- Temp fix until selective registration ensures correct handling of complex types
-- OWBSYS.wb_rt_mapaudit_util.register_custom_param(x_audit_id,
                                            -- '"PROCESS_IND_IN"',
                                            -- TO_CHAR("PROCESS_IND_IN"));
  -- Temp fix until selective registration ensures correct handling of complex types
-- OWBSYS.wb_rt_mapaudit_util.register_custom_param(x_audit_id,
                                            -- '"PROCESS_DATE_IN"',
                                            -- TO_CHAR("PROCESS_DATE_IN"));
  -- really run it:
  -- return code from mapping is
  --   0 - success
  --   1 - failure
  --   2 - completed (with errors/warnings)
  x_return_code := NULL;
  BEGIN
      x_result := Main( "PROCESS_IND_IN", "PROCESS_DATE_IN",
      x_env);
  EXCEPTION
    WHEN OTHERS THEN
      x_result := 1;
      x_return_code := SQLCODE;
  END;

  IF get_job_audit AND x_audit_id IS NOT NULL THEN
  -- perform post map cleanup

  IF (get_job_audit) THEN
    OWBSYS.wb_rt_mapaudit_util.postmap(x_audit_id, x_result, x_return_code);
  END IF;

  -- show results:
  OWBSYS.wb_rt_mapaudit_util.show_run_results(x_audit_id);
  END IF;

  -- set return status
  IF x_result = 0 THEN
    p_status := 'OK';
  ELSIF x_result = 1 THEN
    p_status := 'FAILURE (ERROR CODE='||x_return_code||')';
  ELSE
    p_status := 'OK_WITH_WARNINGS';
  END IF;

END Main;

PROCEDURE Close_Cursors IS
BEGIN
BEGIN
  IF "DEDUPLICATOR_IN2_c"%ISOPEN THEN
    CLOSE "DEDUPLICATOR_IN2_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "DEDUPLICATOR_0_IN2_c"%ISOPEN THEN
    CLOSE "DEDUPLICATOR_0_IN2_c";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "DEDUPLICATOR_IN2_c$1"%ISOPEN THEN
    CLOSE "DEDUPLICATOR_IN2_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;BEGIN
  IF "DEDUPLICATOR_0_IN2_c$1"%ISOPEN THEN
    CLOSE "DEDUPLICATOR_0_IN2_c$1";
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    NULL;    
END;

END Close_Cursors;



END "EDW_DIM_WAREHOUSE_ENTITY";